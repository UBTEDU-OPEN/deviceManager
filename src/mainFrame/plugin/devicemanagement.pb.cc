// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: devicemanagement.proto

#include "devicemanagement.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
extern PROTOBUF_INTERNAL_EXPORT_devicemanagement_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SharedFileInfo_devicemanagement_2eproto;
namespace dm {
class TransMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsg> _instance;
} _TransMsg_default_instance_;
class CmdPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmdPackage> _instance;
} _CmdPackage_default_instance_;
class CmdPackageV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmdPackageV2> _instance;
} _CmdPackageV2_default_instance_;
class BroadcastPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastPackage> _instance;
} _BroadcastPackage_default_instance_;
class ConnectPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectPackage> _instance;
} _ConnectPackage_default_instance_;
class ResponsePackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponsePackage> _instance;
} _ResponsePackage_default_instance_;
class StatePackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatePackage> _instance;
} _StatePackage_default_instance_;
class StatusPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusPackage> _instance;
} _StatusPackage_default_instance_;
class PercentPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PercentPackage> _instance;
} _PercentPackage_default_instance_;
class FileRequestPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileRequestPackage> _instance;
} _FileRequestPackage_default_instance_;
class FileInfoPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileInfoPackage> _instance;
} _FileInfoPackage_default_instance_;
class RecvReadyPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecvReadyPackage> _instance;
} _RecvReadyPackage_default_instance_;
class SharedFileInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SharedFileInfo> _instance;
} _SharedFileInfo_default_instance_;
class SharedFileListPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SharedFileListPackage> _instance;
} _SharedFileListPackage_default_instance_;
class RequestSharedFileListPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestSharedFileListPackage> _instance;
} _RequestSharedFileListPackage_default_instance_;
class UpgradeStagePackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpgradeStagePackage> _instance;
} _UpgradeStagePackage_default_instance_;
class ConnectResponsePackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectResponsePackage> _instance;
} _ConnectResponsePackage_default_instance_;
}  // namespace dm
static void InitDefaultsscc_info_BroadcastPackage_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_BroadcastPackage_default_instance_;
    new (ptr) ::dm::BroadcastPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastPackage_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BroadcastPackage_devicemanagement_2eproto}, {}};

static void InitDefaultsscc_info_CmdPackage_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_CmdPackage_default_instance_;
    new (ptr) ::dm::CmdPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmdPackage_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CmdPackage_devicemanagement_2eproto}, {}};

static void InitDefaultsscc_info_CmdPackageV2_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_CmdPackageV2_default_instance_;
    new (ptr) ::dm::CmdPackageV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmdPackageV2_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CmdPackageV2_devicemanagement_2eproto}, {}};

static void InitDefaultsscc_info_ConnectPackage_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_ConnectPackage_default_instance_;
    new (ptr) ::dm::ConnectPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectPackage_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnectPackage_devicemanagement_2eproto}, {}};

static void InitDefaultsscc_info_ConnectResponsePackage_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_ConnectResponsePackage_default_instance_;
    new (ptr) ::dm::ConnectResponsePackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectResponsePackage_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnectResponsePackage_devicemanagement_2eproto}, {}};

static void InitDefaultsscc_info_FileInfoPackage_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_FileInfoPackage_default_instance_;
    new (ptr) ::dm::FileInfoPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileInfoPackage_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FileInfoPackage_devicemanagement_2eproto}, {}};

static void InitDefaultsscc_info_FileRequestPackage_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_FileRequestPackage_default_instance_;
    new (ptr) ::dm::FileRequestPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileRequestPackage_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FileRequestPackage_devicemanagement_2eproto}, {}};

static void InitDefaultsscc_info_PercentPackage_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_PercentPackage_default_instance_;
    new (ptr) ::dm::PercentPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PercentPackage_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PercentPackage_devicemanagement_2eproto}, {}};

static void InitDefaultsscc_info_RecvReadyPackage_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_RecvReadyPackage_default_instance_;
    new (ptr) ::dm::RecvReadyPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecvReadyPackage_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecvReadyPackage_devicemanagement_2eproto}, {}};

static void InitDefaultsscc_info_RequestSharedFileListPackage_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_RequestSharedFileListPackage_default_instance_;
    new (ptr) ::dm::RequestSharedFileListPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestSharedFileListPackage_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestSharedFileListPackage_devicemanagement_2eproto}, {}};

static void InitDefaultsscc_info_ResponsePackage_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_ResponsePackage_default_instance_;
    new (ptr) ::dm::ResponsePackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponsePackage_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResponsePackage_devicemanagement_2eproto}, {}};

static void InitDefaultsscc_info_SharedFileInfo_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_SharedFileInfo_default_instance_;
    new (ptr) ::dm::SharedFileInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SharedFileInfo_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SharedFileInfo_devicemanagement_2eproto}, {}};

static void InitDefaultsscc_info_SharedFileListPackage_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_SharedFileListPackage_default_instance_;
    new (ptr) ::dm::SharedFileListPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SharedFileListPackage_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SharedFileListPackage_devicemanagement_2eproto}, {
      &scc_info_SharedFileInfo_devicemanagement_2eproto.base,}};

static void InitDefaultsscc_info_StatePackage_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_StatePackage_default_instance_;
    new (ptr) ::dm::StatePackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatePackage_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatePackage_devicemanagement_2eproto}, {}};

static void InitDefaultsscc_info_StatusPackage_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_StatusPackage_default_instance_;
    new (ptr) ::dm::StatusPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusPackage_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusPackage_devicemanagement_2eproto}, {}};

static void InitDefaultsscc_info_TransMsg_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_TransMsg_default_instance_;
    new (ptr) ::dm::TransMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsg_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransMsg_devicemanagement_2eproto}, {}};

static void InitDefaultsscc_info_UpgradeStagePackage_devicemanagement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dm::_UpgradeStagePackage_default_instance_;
    new (ptr) ::dm::UpgradeStagePackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpgradeStagePackage_devicemanagement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpgradeStagePackage_devicemanagement_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_devicemanagement_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_devicemanagement_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_devicemanagement_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_devicemanagement_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::TransMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::TransMsg, packagetype_),
  PROTOBUF_FIELD_OFFSET(::dm::TransMsg, packagecontent_),
  PROTOBUF_FIELD_OFFSET(::dm::CmdPackage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dm::CmdPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::CmdPackage, cmd_),
  PROTOBUF_FIELD_OFFSET(::dm::CmdPackage, lock_),
  PROTOBUF_FIELD_OFFSET(::dm::CmdPackage, version_),
  PROTOBUF_FIELD_OFFSET(::dm::CmdPackage, imgname_),
  PROTOBUF_FIELD_OFFSET(::dm::CmdPackage, saveuserdata_),
  ~0u,
  2,
  0,
  1,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::CmdPackageV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::CmdPackageV2, cmd_),
  PROTOBUF_FIELD_OFFSET(::dm::CmdPackageV2, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::BroadcastPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::BroadcastPackage, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::ConnectPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::ConnectPackage, connect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::ResponsePackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::ResponsePackage, code_),
  PROTOBUF_FIELD_OFFSET(::dm::ResponsePackage, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::StatePackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::StatePackage, power_),
  PROTOBUF_FIELD_OFFSET(::dm::StatePackage, charging_),
  PROTOBUF_FIELD_OFFSET(::dm::StatePackage, sn_),
  PROTOBUF_FIELD_OFFSET(::dm::StatePackage, lock_),
  PROTOBUF_FIELD_OFFSET(::dm::StatePackage, version_),
  PROTOBUF_FIELD_OFFSET(::dm::StatePackage, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::StatusPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::StatusPackage, power_),
  PROTOBUF_FIELD_OFFSET(::dm::StatusPackage, charging_),
  PROTOBUF_FIELD_OFFSET(::dm::StatusPackage, sn_),
  PROTOBUF_FIELD_OFFSET(::dm::StatusPackage, lock_),
  PROTOBUF_FIELD_OFFSET(::dm::StatusPackage, version_),
  PROTOBUF_FIELD_OFFSET(::dm::StatusPackage, state_),
  PROTOBUF_FIELD_OFFSET(::dm::StatusPackage, devicetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::PercentPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::PercentPackage, percentage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::FileRequestPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::FileRequestPackage, filename_),
  PROTOBUF_FIELD_OFFSET(::dm::FileRequestPackage, issharedfile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::FileInfoPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::FileInfoPackage, filename_),
  PROTOBUF_FIELD_OFFSET(::dm::FileInfoPackage, md5_),
  PROTOBUF_FIELD_OFFSET(::dm::FileInfoPackage, size_),
  PROTOBUF_FIELD_OFFSET(::dm::FileInfoPackage, other_),
  PROTOBUF_FIELD_OFFSET(::dm::FileInfoPackage, issharedfile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::RecvReadyPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::RecvReadyPackage, filename_),
  PROTOBUF_FIELD_OFFSET(::dm::RecvReadyPackage, offset_),
  PROTOBUF_FIELD_OFFSET(::dm::RecvReadyPackage, issharedfile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::SharedFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::SharedFileInfo, filename_),
  PROTOBUF_FIELD_OFFSET(::dm::SharedFileInfo, sharetimestamp_),
  PROTOBUF_FIELD_OFFSET(::dm::SharedFileInfo, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::SharedFileListPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::SharedFileListPackage, sharedfile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::RequestSharedFileListPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::RequestSharedFileListPackage, reserved_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::UpgradeStagePackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::UpgradeStagePackage, stage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dm::ConnectResponsePackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dm::ConnectResponsePackage, sn_),
  PROTOBUF_FIELD_OFFSET(::dm::ConnectResponsePackage, serverip_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dm::TransMsg)},
  { 7, 17, sizeof(::dm::CmdPackage)},
  { 22, -1, sizeof(::dm::CmdPackageV2)},
  { 29, -1, sizeof(::dm::BroadcastPackage)},
  { 35, -1, sizeof(::dm::ConnectPackage)},
  { 41, -1, sizeof(::dm::ResponsePackage)},
  { 48, -1, sizeof(::dm::StatePackage)},
  { 59, -1, sizeof(::dm::StatusPackage)},
  { 71, -1, sizeof(::dm::PercentPackage)},
  { 77, -1, sizeof(::dm::FileRequestPackage)},
  { 84, -1, sizeof(::dm::FileInfoPackage)},
  { 94, -1, sizeof(::dm::RecvReadyPackage)},
  { 102, -1, sizeof(::dm::SharedFileInfo)},
  { 110, -1, sizeof(::dm::SharedFileListPackage)},
  { 116, -1, sizeof(::dm::RequestSharedFileListPackage)},
  { 122, -1, sizeof(::dm::UpgradeStagePackage)},
  { 128, -1, sizeof(::dm::ConnectResponsePackage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_TransMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_CmdPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_CmdPackageV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_BroadcastPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_ConnectPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_ResponsePackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_StatePackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_StatusPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_PercentPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_FileRequestPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_FileInfoPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_RecvReadyPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_SharedFileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_SharedFileListPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_RequestSharedFileListPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_UpgradeStagePackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dm::_ConnectResponsePackage_default_instance_),
};

const char descriptor_table_protodef_devicemanagement_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026devicemanagement.proto\022\002dm\"\335\003\n\010TransMs"
  "g\022-\n\013packageType\030\001 \001(\0162\030.dm.TransMsg.PAC"
  "KAGETYPE\022\026\n\016packageContent\030\002 \001(\014\"\211\003\n\013PAC"
  "KAGETYPE\022\022\n\016UNKNOWNPACKAGE\020\000\022\016\n\nCMDPACKA"
  "GE\020\001\022\024\n\020BROADCASTPACKAGE\020\002\022\022\n\016CONNECTPAC"
  "KAGE\020\003\022\023\n\017RESPONSEPACKAGE\020\004\022\020\n\014STATEPACK"
  "AGE\020\005\022\022\n\016PERCENTPACKAGE\020\006\022\026\n\022FILEREQUEST"
  "PACKAGE\020\007\022\023\n\017FILEINFOPACKAGE\020\010\022\024\n\020RECVRE"
  "ADYPACKAGE\020\t\022\026\n\022FILECONTENTPACKAGE\020\n\022 \n\034"
  "REQUESTSHAREDFILELISTPACKAGE\020\013\022\031\n\025SHARED"
  "FILELISTPACKAGE\020\014\022\027\n\023UPGRADESTAGEPACKAGE"
  "\020\r\022\032\n\026CONNECTRESPONSEPACKAGE\020\016\022\021\n\rSTATUS"
  "PACKAGE\020\017\022\021\n\rCMDPACKAGE_V2\020\020\"\244\002\n\nCmdPack"
  "age\022#\n\003cmd\030\001 \001(\0162\026.dm.CmdPackage.CMDTYPE"
  "\022\021\n\004lock\030\002 \001(\010H\000\210\001\001\022\024\n\007version\030\003 \001(\tH\001\210\001"
  "\001\022\024\n\007imgName\030\004 \001(\tH\002\210\001\001\022\031\n\014saveUserData\030"
  "\005 \001(\010H\003\210\001\001\"e\n\007CMDTYPE\022\013\n\007UNKNOWN\020\000\022\014\n\010SH"
  "UTDOWN\020\001\022\n\n\006REBOOT\020\002\022\t\n\005RESET\020\003\022\010\n\004LOCK\020"
  "\004\022\013\n\007UPGRADE\020\005\022\021\n\rCANCELUPGRADE\020\006B\007\n\005_lo"
  "ckB\n\n\010_versionB\n\n\010_imgNameB\017\n\r_saveUserD"
  "ata\"\260\001\n\014CmdPackageV2\022%\n\003cmd\030\001 \001(\0162\030.dm.C"
  "mdPackageV2.CMDTYPE\022\022\n\nparameters\030\002 \001(\014\""
  "e\n\007CMDTYPE\022\013\n\007UNKNOWN\020\000\022\014\n\010SHUTDOWN\020\001\022\n\n"
  "\006REBOOT\020\002\022\t\n\005RESET\020\003\022\010\n\004LOCK\020\004\022\013\n\007UPGRAD"
  "E\020\005\022\021\n\rCANCELUPGRADE\020\006\"!\n\020BroadcastPacka"
  "ge\022\r\n\005query\030\001 \001(\t\"!\n\016ConnectPackage\022\017\n\007c"
  "onnect\030\001 \001(\010\"0\n\017ResponsePackage\022\014\n\004code\030"
  "\001 \001(\005\022\017\n\007message\030\002 \001(\t\"i\n\014StatePackage\022\r"
  "\n\005power\030\001 \001(\005\022\020\n\010charging\030\002 \001(\010\022\n\n\002sn\030\003 "
  "\001(\t\022\014\n\004lock\030\004 \001(\010\022\017\n\007version\030\005 \001(\t\022\r\n\005st"
  "ate\030\006 \001(\005\"~\n\rStatusPackage\022\r\n\005power\030\001 \001("
  "\005\022\020\n\010charging\030\002 \001(\010\022\n\n\002sn\030\003 \001(\t\022\014\n\004lock\030"
  "\004 \001(\010\022\017\n\007version\030\005 \001(\t\022\r\n\005state\030\006 \001(\005\022\022\n"
  "\ndeviceType\030\007 \001(\005\"$\n\016PercentPackage\022\022\n\np"
  "ercentage\030\001 \001(\005\"<\n\022FileRequestPackage\022\020\n"
  "\010fileName\030\001 \001(\t\022\024\n\014isSharedFile\030\002 \001(\010\"c\n"
  "\017FileInfoPackage\022\020\n\010fileName\030\001 \001(\t\022\013\n\003md"
  "5\030\002 \001(\t\022\014\n\004size\030\003 \001(\004\022\r\n\005other\030\004 \001(\014\022\024\n\014"
  "isSharedFile\030\005 \001(\010\"J\n\020RecvReadyPackage\022\020"
  "\n\010fileName\030\001 \001(\t\022\016\n\006offset\030\002 \001(\004\022\024\n\014isSh"
  "aredFile\030\003 \001(\010\"H\n\016SharedFileInfo\022\020\n\010file"
  "Name\030\001 \001(\t\022\026\n\016shareTimeStamp\030\002 \001(\004\022\014\n\004si"
  "ze\030\003 \001(\004\"\?\n\025SharedFileListPackage\022&\n\nsha"
  "redFile\030\001 \003(\0132\022.dm.SharedFileInfo\"0\n\034Req"
  "uestSharedFileListPackage\022\020\n\010reserved\030\001 "
  "\001(\t\"$\n\023UpgradeStagePackage\022\r\n\005stage\030\001 \001("
  "\005\"6\n\026ConnectResponsePackage\022\n\n\002sn\030\001 \001(\t\022"
  "\020\n\010serverIp\030\002 \001(\t*&\n\tERRORCODE\022\013\n\007SUCCES"
  "S\020\000\022\014\n\010RECEIVED\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_devicemanagement_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_devicemanagement_2eproto_sccs[17] = {
  &scc_info_BroadcastPackage_devicemanagement_2eproto.base,
  &scc_info_CmdPackage_devicemanagement_2eproto.base,
  &scc_info_CmdPackageV2_devicemanagement_2eproto.base,
  &scc_info_ConnectPackage_devicemanagement_2eproto.base,
  &scc_info_ConnectResponsePackage_devicemanagement_2eproto.base,
  &scc_info_FileInfoPackage_devicemanagement_2eproto.base,
  &scc_info_FileRequestPackage_devicemanagement_2eproto.base,
  &scc_info_PercentPackage_devicemanagement_2eproto.base,
  &scc_info_RecvReadyPackage_devicemanagement_2eproto.base,
  &scc_info_RequestSharedFileListPackage_devicemanagement_2eproto.base,
  &scc_info_ResponsePackage_devicemanagement_2eproto.base,
  &scc_info_SharedFileInfo_devicemanagement_2eproto.base,
  &scc_info_SharedFileListPackage_devicemanagement_2eproto.base,
  &scc_info_StatePackage_devicemanagement_2eproto.base,
  &scc_info_StatusPackage_devicemanagement_2eproto.base,
  &scc_info_TransMsg_devicemanagement_2eproto.base,
  &scc_info_UpgradeStagePackage_devicemanagement_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_devicemanagement_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_devicemanagement_2eproto = {
  false, false, descriptor_table_protodef_devicemanagement_2eproto, "devicemanagement.proto", 1945,
  &descriptor_table_devicemanagement_2eproto_once, descriptor_table_devicemanagement_2eproto_sccs, descriptor_table_devicemanagement_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_devicemanagement_2eproto::offsets,
  file_level_metadata_devicemanagement_2eproto, 17, file_level_enum_descriptors_devicemanagement_2eproto, file_level_service_descriptors_devicemanagement_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_devicemanagement_2eproto(&descriptor_table_devicemanagement_2eproto);
namespace dm {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransMsg_PACKAGETYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_devicemanagement_2eproto);
  return file_level_enum_descriptors_devicemanagement_2eproto[0];
}
bool TransMsg_PACKAGETYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransMsg_PACKAGETYPE TransMsg::UNKNOWNPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::CMDPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::BROADCASTPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::CONNECTPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::RESPONSEPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::STATEPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::PERCENTPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::FILEREQUESTPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::FILEINFOPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::RECVREADYPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::FILECONTENTPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::REQUESTSHAREDFILELISTPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::SHAREDFILELISTPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::UPGRADESTAGEPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::CONNECTRESPONSEPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::STATUSPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg::CMDPACKAGE_V2;
constexpr TransMsg_PACKAGETYPE TransMsg::PACKAGETYPE_MIN;
constexpr TransMsg_PACKAGETYPE TransMsg::PACKAGETYPE_MAX;
constexpr int TransMsg::PACKAGETYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdPackage_CMDTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_devicemanagement_2eproto);
  return file_level_enum_descriptors_devicemanagement_2eproto[1];
}
bool CmdPackage_CMDTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CmdPackage_CMDTYPE CmdPackage::UNKNOWN;
constexpr CmdPackage_CMDTYPE CmdPackage::SHUTDOWN;
constexpr CmdPackage_CMDTYPE CmdPackage::REBOOT;
constexpr CmdPackage_CMDTYPE CmdPackage::RESET;
constexpr CmdPackage_CMDTYPE CmdPackage::LOCK;
constexpr CmdPackage_CMDTYPE CmdPackage::UPGRADE;
constexpr CmdPackage_CMDTYPE CmdPackage::CANCELUPGRADE;
constexpr CmdPackage_CMDTYPE CmdPackage::CMDTYPE_MIN;
constexpr CmdPackage_CMDTYPE CmdPackage::CMDTYPE_MAX;
constexpr int CmdPackage::CMDTYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdPackageV2_CMDTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_devicemanagement_2eproto);
  return file_level_enum_descriptors_devicemanagement_2eproto[2];
}
bool CmdPackageV2_CMDTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CmdPackageV2_CMDTYPE CmdPackageV2::UNKNOWN;
constexpr CmdPackageV2_CMDTYPE CmdPackageV2::SHUTDOWN;
constexpr CmdPackageV2_CMDTYPE CmdPackageV2::REBOOT;
constexpr CmdPackageV2_CMDTYPE CmdPackageV2::RESET;
constexpr CmdPackageV2_CMDTYPE CmdPackageV2::LOCK;
constexpr CmdPackageV2_CMDTYPE CmdPackageV2::UPGRADE;
constexpr CmdPackageV2_CMDTYPE CmdPackageV2::CANCELUPGRADE;
constexpr CmdPackageV2_CMDTYPE CmdPackageV2::CMDTYPE_MIN;
constexpr CmdPackageV2_CMDTYPE CmdPackageV2::CMDTYPE_MAX;
constexpr int CmdPackageV2::CMDTYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERRORCODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_devicemanagement_2eproto);
  return file_level_enum_descriptors_devicemanagement_2eproto[3];
}
bool ERRORCODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TransMsg::_Internal {
 public:
};

TransMsg::TransMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.TransMsg)
}
TransMsg::TransMsg(const TransMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  packagecontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_packagecontent().empty()) {
    packagecontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_packagecontent(), 
      GetArena());
  }
  packagetype_ = from.packagetype_;
  // @@protoc_insertion_point(copy_constructor:dm.TransMsg)
}

void TransMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsg_devicemanagement_2eproto.base);
  packagecontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packagetype_ = 0;
}

TransMsg::~TransMsg() {
  // @@protoc_insertion_point(destructor:dm.TransMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  packagecontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsg::ArenaDtor(void* object) {
  TransMsg* _this = reinterpret_cast< TransMsg* >(object);
  (void)_this;
}
void TransMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsg& TransMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsg_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void TransMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.TransMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packagecontent_.ClearToEmpty();
  packagetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dm.TransMsg.PACKAGETYPE packageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_packagetype(static_cast<::dm::TransMsg_PACKAGETYPE>(val));
        } else goto handle_unusual;
        continue;
      // bytes packageContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_packagecontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.TransMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dm.TransMsg.PACKAGETYPE packageType = 1;
  if (this->packagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_packagetype(), target);
  }

  // bytes packageContent = 2;
  if (this->packagecontent().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_packagecontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.TransMsg)
  return target;
}

size_t TransMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.TransMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes packageContent = 2;
  if (this->packagecontent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_packagecontent());
  }

  // .dm.TransMsg.PACKAGETYPE packageType = 1;
  if (this->packagetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packagetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.TransMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.TransMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.TransMsg)
    MergeFrom(*source);
  }
}

void TransMsg::MergeFrom(const TransMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.TransMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.packagecontent().size() > 0) {
    _internal_set_packagecontent(from._internal_packagecontent());
  }
  if (from.packagetype() != 0) {
    _internal_set_packagetype(from._internal_packagetype());
  }
}

void TransMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.TransMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsg::CopyFrom(const TransMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.TransMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsg::IsInitialized() const {
  return true;
}

void TransMsg::InternalSwap(TransMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  packagecontent_.Swap(&other->packagecontent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(packagetype_, other->packagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CmdPackage::_Internal {
 public:
  using HasBits = decltype(std::declval<CmdPackage>()._has_bits_);
  static void set_has_lock(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_imgname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_saveuserdata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CmdPackage::CmdPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.CmdPackage)
}
CmdPackage::CmdPackage(const CmdPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  imgname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_imgname()) {
    imgname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imgname(), 
      GetArena());
  }
  ::memcpy(&cmd_, &from.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&saveuserdata_) -
    reinterpret_cast<char*>(&cmd_)) + sizeof(saveuserdata_));
  // @@protoc_insertion_point(copy_constructor:dm.CmdPackage)
}

void CmdPackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CmdPackage_devicemanagement_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imgname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&saveuserdata_) -
      reinterpret_cast<char*>(&cmd_)) + sizeof(saveuserdata_));
}

CmdPackage::~CmdPackage() {
  // @@protoc_insertion_point(destructor:dm.CmdPackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CmdPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imgname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CmdPackage::ArenaDtor(void* object) {
  CmdPackage* _this = reinterpret_cast< CmdPackage* >(object);
  (void)_this;
}
void CmdPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CmdPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmdPackage& CmdPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmdPackage_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void CmdPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.CmdPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      imgname_.ClearNonDefaultToEmpty();
    }
  }
  cmd_ = 0;
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&lock_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&saveuserdata_) -
        reinterpret_cast<char*>(&lock_)) + sizeof(saveuserdata_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmdPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dm.CmdPackage.CMDTYPE cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::dm::CmdPackage_CMDTYPE>(val));
        } else goto handle_unusual;
        continue;
      // bool lock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lock(&has_bits);
          lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.CmdPackage.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imgName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_imgname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.CmdPackage.imgName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool saveUserData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_saveuserdata(&has_bits);
          saveuserdata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CmdPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.CmdPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dm.CmdPackage.CMDTYPE cmd = 1;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // bool lock = 2;
  if (_internal_has_lock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_lock(), target);
  }

  // string version = 3;
  if (_internal_has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.CmdPackage.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // string imgName = 4;
  if (_internal_has_imgname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imgname().data(), static_cast<int>(this->_internal_imgname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.CmdPackage.imgName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_imgname(), target);
  }

  // bool saveUserData = 5;
  if (_internal_has_saveuserdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_saveuserdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.CmdPackage)
  return target;
}

size_t CmdPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.CmdPackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string version = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // string imgName = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imgname());
    }

  }
  // .dm.CmdPackage.CMDTYPE cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  if (cached_has_bits & 0x0000000cu) {
    // bool lock = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // bool saveUserData = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.CmdPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmdPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.CmdPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.CmdPackage)
    MergeFrom(*source);
  }
}

void CmdPackage::MergeFrom(const CmdPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.CmdPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_imgname(from._internal_imgname());
    }
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
  if (cached_has_bits & 0x0000000cu) {
    if (cached_has_bits & 0x00000004u) {
      lock_ = from.lock_;
    }
    if (cached_has_bits & 0x00000008u) {
      saveuserdata_ = from.saveuserdata_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CmdPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.CmdPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdPackage::CopyFrom(const CmdPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.CmdPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdPackage::IsInitialized() const {
  return true;
}

void CmdPackage::InternalSwap(CmdPackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imgname_.Swap(&other->imgname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CmdPackage, saveuserdata_)
      + sizeof(CmdPackage::saveuserdata_)
      - PROTOBUF_FIELD_OFFSET(CmdPackage, cmd_)>(
          reinterpret_cast<char*>(&cmd_),
          reinterpret_cast<char*>(&other->cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CmdPackageV2::_Internal {
 public:
};

CmdPackageV2::CmdPackageV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.CmdPackageV2)
}
CmdPackageV2::CmdPackageV2(const CmdPackageV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parameters().empty()) {
    parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parameters(), 
      GetArena());
  }
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:dm.CmdPackageV2)
}

void CmdPackageV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CmdPackageV2_devicemanagement_2eproto.base);
  parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmd_ = 0;
}

CmdPackageV2::~CmdPackageV2() {
  // @@protoc_insertion_point(destructor:dm.CmdPackageV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CmdPackageV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  parameters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CmdPackageV2::ArenaDtor(void* object) {
  CmdPackageV2* _this = reinterpret_cast< CmdPackageV2* >(object);
  (void)_this;
}
void CmdPackageV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CmdPackageV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmdPackageV2& CmdPackageV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmdPackageV2_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void CmdPackageV2::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.CmdPackageV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.ClearToEmpty();
  cmd_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmdPackageV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dm.CmdPackageV2.CMDTYPE cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::dm::CmdPackageV2_CMDTYPE>(val));
        } else goto handle_unusual;
        continue;
      // bytes parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_parameters();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CmdPackageV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.CmdPackageV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dm.CmdPackageV2.CMDTYPE cmd = 1;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // bytes parameters = 2;
  if (this->parameters().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_parameters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.CmdPackageV2)
  return target;
}

size_t CmdPackageV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.CmdPackageV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes parameters = 2;
  if (this->parameters().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parameters());
  }

  // .dm.CmdPackageV2.CMDTYPE cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdPackageV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.CmdPackageV2)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdPackageV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmdPackageV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.CmdPackageV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.CmdPackageV2)
    MergeFrom(*source);
  }
}

void CmdPackageV2::MergeFrom(const CmdPackageV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.CmdPackageV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parameters().size() > 0) {
    _internal_set_parameters(from._internal_parameters());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void CmdPackageV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.CmdPackageV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdPackageV2::CopyFrom(const CmdPackageV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.CmdPackageV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdPackageV2::IsInitialized() const {
  return true;
}

void CmdPackageV2::InternalSwap(CmdPackageV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parameters_.Swap(&other->parameters_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdPackageV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BroadcastPackage::_Internal {
 public:
};

BroadcastPackage::BroadcastPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.BroadcastPackage)
}
BroadcastPackage::BroadcastPackage(const BroadcastPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:dm.BroadcastPackage)
}

void BroadcastPackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastPackage_devicemanagement_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BroadcastPackage::~BroadcastPackage() {
  // @@protoc_insertion_point(destructor:dm.BroadcastPackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BroadcastPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BroadcastPackage::ArenaDtor(void* object) {
  BroadcastPackage* _this = reinterpret_cast< BroadcastPackage* >(object);
  (void)_this;
}
void BroadcastPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BroadcastPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastPackage& BroadcastPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastPackage_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void BroadcastPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.BroadcastPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.BroadcastPackage.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.BroadcastPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.BroadcastPackage.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.BroadcastPackage)
  return target;
}

size_t BroadcastPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.BroadcastPackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.BroadcastPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.BroadcastPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.BroadcastPackage)
    MergeFrom(*source);
  }
}

void BroadcastPackage::MergeFrom(const BroadcastPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.BroadcastPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {
    _internal_set_query(from._internal_query());
  }
}

void BroadcastPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.BroadcastPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastPackage::CopyFrom(const BroadcastPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.BroadcastPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastPackage::IsInitialized() const {
  return true;
}

void BroadcastPackage::InternalSwap(BroadcastPackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConnectPackage::_Internal {
 public:
};

ConnectPackage::ConnectPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.ConnectPackage)
}
ConnectPackage::ConnectPackage(const ConnectPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connect_ = from.connect_;
  // @@protoc_insertion_point(copy_constructor:dm.ConnectPackage)
}

void ConnectPackage::SharedCtor() {
  connect_ = false;
}

ConnectPackage::~ConnectPackage() {
  // @@protoc_insertion_point(destructor:dm.ConnectPackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConnectPackage::ArenaDtor(void* object) {
  ConnectPackage* _this = reinterpret_cast< ConnectPackage* >(object);
  (void)_this;
}
void ConnectPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectPackage& ConnectPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectPackage_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void ConnectPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.ConnectPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connect_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool connect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          connect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.ConnectPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool connect = 1;
  if (this->connect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_connect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.ConnectPackage)
  return target;
}

size_t ConnectPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.ConnectPackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool connect = 1;
  if (this->connect() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.ConnectPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.ConnectPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.ConnectPackage)
    MergeFrom(*source);
  }
}

void ConnectPackage::MergeFrom(const ConnectPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.ConnectPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connect() != 0) {
    _internal_set_connect(from._internal_connect());
  }
}

void ConnectPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.ConnectPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectPackage::CopyFrom(const ConnectPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.ConnectPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectPackage::IsInitialized() const {
  return true;
}

void ConnectPackage::InternalSwap(ConnectPackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(connect_, other->connect_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResponsePackage::_Internal {
 public:
};

ResponsePackage::ResponsePackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.ResponsePackage)
}
ResponsePackage::ResponsePackage(const ResponsePackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:dm.ResponsePackage)
}

void ResponsePackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponsePackage_devicemanagement_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

ResponsePackage::~ResponsePackage() {
  // @@protoc_insertion_point(destructor:dm.ResponsePackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponsePackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponsePackage::ArenaDtor(void* object) {
  ResponsePackage* _this = reinterpret_cast< ResponsePackage* >(object);
  (void)_this;
}
void ResponsePackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponsePackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponsePackage& ResponsePackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponsePackage_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void ResponsePackage::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.ResponsePackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponsePackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.ResponsePackage.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponsePackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.ResponsePackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.ResponsePackage.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.ResponsePackage)
  return target;
}

size_t ResponsePackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.ResponsePackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponsePackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.ResponsePackage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponsePackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponsePackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.ResponsePackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.ResponsePackage)
    MergeFrom(*source);
  }
}

void ResponsePackage::MergeFrom(const ResponsePackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.ResponsePackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ResponsePackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.ResponsePackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePackage::CopyFrom(const ResponsePackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.ResponsePackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePackage::IsInitialized() const {
  return true;
}

void ResponsePackage::InternalSwap(ResponsePackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponsePackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatePackage::_Internal {
 public:
};

StatePackage::StatePackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.StatePackage)
}
StatePackage::StatePackage(const StatePackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sn().empty()) {
    sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sn(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  ::memcpy(&power_, &from.power_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&power_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:dm.StatePackage)
}

void StatePackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatePackage_devicemanagement_2eproto.base);
  sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&power_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&power_)) + sizeof(state_));
}

StatePackage::~StatePackage() {
  // @@protoc_insertion_point(destructor:dm.StatePackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatePackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatePackage::ArenaDtor(void* object) {
  StatePackage* _this = reinterpret_cast< StatePackage* >(object);
  (void)_this;
}
void StatePackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatePackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatePackage& StatePackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatePackage_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void StatePackage::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.StatePackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sn_.ClearToEmpty();
  version_.ClearToEmpty();
  ::memset(&power_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&power_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatePackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 power = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool charging = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          charging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.StatePackage.sn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.StatePackage.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatePackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.StatePackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 power = 1;
  if (this->power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_power(), target);
  }

  // bool charging = 2;
  if (this->charging() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_charging(), target);
  }

  // string sn = 3;
  if (this->sn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sn().data(), static_cast<int>(this->_internal_sn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.StatePackage.sn");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sn(), target);
  }

  // bool lock = 4;
  if (this->lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_lock(), target);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.StatePackage.version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_version(), target);
  }

  // int32 state = 6;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.StatePackage)
  return target;
}

size_t StatePackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.StatePackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sn = 3;
  if (this->sn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sn());
  }

  // string version = 5;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // int32 power = 1;
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_power());
  }

  // bool charging = 2;
  if (this->charging() != 0) {
    total_size += 1 + 1;
  }

  // bool lock = 4;
  if (this->lock() != 0) {
    total_size += 1 + 1;
  }

  // int32 state = 6;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatePackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.StatePackage)
  GOOGLE_DCHECK_NE(&from, this);
  const StatePackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatePackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.StatePackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.StatePackage)
    MergeFrom(*source);
  }
}

void StatePackage::MergeFrom(const StatePackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.StatePackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn().size() > 0) {
    _internal_set_sn(from._internal_sn());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from.charging() != 0) {
    _internal_set_charging(from._internal_charging());
  }
  if (from.lock() != 0) {
    _internal_set_lock(from._internal_lock());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void StatePackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.StatePackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatePackage::CopyFrom(const StatePackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.StatePackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatePackage::IsInitialized() const {
  return true;
}

void StatePackage::InternalSwap(StatePackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sn_.Swap(&other->sn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatePackage, state_)
      + sizeof(StatePackage::state_)
      - PROTOBUF_FIELD_OFFSET(StatePackage, power_)>(
          reinterpret_cast<char*>(&power_),
          reinterpret_cast<char*>(&other->power_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatePackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusPackage::_Internal {
 public:
};

StatusPackage::StatusPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.StatusPackage)
}
StatusPackage::StatusPackage(const StatusPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sn().empty()) {
    sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sn(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  ::memcpy(&power_, &from.power_,
    static_cast<size_t>(reinterpret_cast<char*>(&devicetype_) -
    reinterpret_cast<char*>(&power_)) + sizeof(devicetype_));
  // @@protoc_insertion_point(copy_constructor:dm.StatusPackage)
}

void StatusPackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusPackage_devicemanagement_2eproto.base);
  sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&power_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&devicetype_) -
      reinterpret_cast<char*>(&power_)) + sizeof(devicetype_));
}

StatusPackage::~StatusPackage() {
  // @@protoc_insertion_point(destructor:dm.StatusPackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatusPackage::ArenaDtor(void* object) {
  StatusPackage* _this = reinterpret_cast< StatusPackage* >(object);
  (void)_this;
}
void StatusPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusPackage& StatusPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusPackage_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void StatusPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.StatusPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sn_.ClearToEmpty();
  version_.ClearToEmpty();
  ::memset(&power_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&devicetype_) -
      reinterpret_cast<char*>(&power_)) + sizeof(devicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 power = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool charging = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          charging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.StatusPackage.sn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.StatusPackage.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 deviceType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          devicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.StatusPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 power = 1;
  if (this->power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_power(), target);
  }

  // bool charging = 2;
  if (this->charging() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_charging(), target);
  }

  // string sn = 3;
  if (this->sn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sn().data(), static_cast<int>(this->_internal_sn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.StatusPackage.sn");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sn(), target);
  }

  // bool lock = 4;
  if (this->lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_lock(), target);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.StatusPackage.version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_version(), target);
  }

  // int32 state = 6;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_state(), target);
  }

  // int32 deviceType = 7;
  if (this->devicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_devicetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.StatusPackage)
  return target;
}

size_t StatusPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.StatusPackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sn = 3;
  if (this->sn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sn());
  }

  // string version = 5;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // int32 power = 1;
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_power());
  }

  // bool charging = 2;
  if (this->charging() != 0) {
    total_size += 1 + 1;
  }

  // bool lock = 4;
  if (this->lock() != 0) {
    total_size += 1 + 1;
  }

  // int32 state = 6;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 deviceType = 7;
  if (this->devicetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_devicetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.StatusPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.StatusPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.StatusPackage)
    MergeFrom(*source);
  }
}

void StatusPackage::MergeFrom(const StatusPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.StatusPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn().size() > 0) {
    _internal_set_sn(from._internal_sn());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from.charging() != 0) {
    _internal_set_charging(from._internal_charging());
  }
  if (from.lock() != 0) {
    _internal_set_lock(from._internal_lock());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.devicetype() != 0) {
    _internal_set_devicetype(from._internal_devicetype());
  }
}

void StatusPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.StatusPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusPackage::CopyFrom(const StatusPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.StatusPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusPackage::IsInitialized() const {
  return true;
}

void StatusPackage::InternalSwap(StatusPackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sn_.Swap(&other->sn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusPackage, devicetype_)
      + sizeof(StatusPackage::devicetype_)
      - PROTOBUF_FIELD_OFFSET(StatusPackage, power_)>(
          reinterpret_cast<char*>(&power_),
          reinterpret_cast<char*>(&other->power_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PercentPackage::_Internal {
 public:
};

PercentPackage::PercentPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.PercentPackage)
}
PercentPackage::PercentPackage(const PercentPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  percentage_ = from.percentage_;
  // @@protoc_insertion_point(copy_constructor:dm.PercentPackage)
}

void PercentPackage::SharedCtor() {
  percentage_ = 0;
}

PercentPackage::~PercentPackage() {
  // @@protoc_insertion_point(destructor:dm.PercentPackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PercentPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PercentPackage::ArenaDtor(void* object) {
  PercentPackage* _this = reinterpret_cast< PercentPackage* >(object);
  (void)_this;
}
void PercentPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PercentPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PercentPackage& PercentPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PercentPackage_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void PercentPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.PercentPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  percentage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PercentPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 percentage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PercentPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.PercentPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 percentage = 1;
  if (this->percentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.PercentPackage)
  return target;
}

size_t PercentPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.PercentPackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 percentage = 1;
  if (this->percentage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_percentage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PercentPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.PercentPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const PercentPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PercentPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.PercentPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.PercentPackage)
    MergeFrom(*source);
  }
}

void PercentPackage::MergeFrom(const PercentPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.PercentPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.percentage() != 0) {
    _internal_set_percentage(from._internal_percentage());
  }
}

void PercentPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.PercentPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PercentPackage::CopyFrom(const PercentPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.PercentPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PercentPackage::IsInitialized() const {
  return true;
}

void PercentPackage::InternalSwap(PercentPackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(percentage_, other->percentage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PercentPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FileRequestPackage::_Internal {
 public:
};

FileRequestPackage::FileRequestPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.FileRequestPackage)
}
FileRequestPackage::FileRequestPackage(const FileRequestPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  issharedfile_ = from.issharedfile_;
  // @@protoc_insertion_point(copy_constructor:dm.FileRequestPackage)
}

void FileRequestPackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileRequestPackage_devicemanagement_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issharedfile_ = false;
}

FileRequestPackage::~FileRequestPackage() {
  // @@protoc_insertion_point(destructor:dm.FileRequestPackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileRequestPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileRequestPackage::ArenaDtor(void* object) {
  FileRequestPackage* _this = reinterpret_cast< FileRequestPackage* >(object);
  (void)_this;
}
void FileRequestPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileRequestPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileRequestPackage& FileRequestPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileRequestPackage_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void FileRequestPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.FileRequestPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  issharedfile_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileRequestPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fileName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.FileRequestPackage.fileName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSharedFile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          issharedfile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileRequestPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.FileRequestPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.FileRequestPackage.fileName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // bool isSharedFile = 2;
  if (this->issharedfile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_issharedfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.FileRequestPackage)
  return target;
}

size_t FileRequestPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.FileRequestPackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // bool isSharedFile = 2;
  if (this->issharedfile() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileRequestPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.FileRequestPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const FileRequestPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileRequestPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.FileRequestPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.FileRequestPackage)
    MergeFrom(*source);
  }
}

void FileRequestPackage::MergeFrom(const FileRequestPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.FileRequestPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.issharedfile() != 0) {
    _internal_set_issharedfile(from._internal_issharedfile());
  }
}

void FileRequestPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.FileRequestPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileRequestPackage::CopyFrom(const FileRequestPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.FileRequestPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRequestPackage::IsInitialized() const {
  return true;
}

void FileRequestPackage::InternalSwap(FileRequestPackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(issharedfile_, other->issharedfile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileRequestPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FileInfoPackage::_Internal {
 public:
};

FileInfoPackage::FileInfoPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.FileInfoPackage)
}
FileInfoPackage::FileInfoPackage(const FileInfoPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_md5().empty()) {
    md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_md5(), 
      GetArena());
  }
  other_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_other().empty()) {
    other_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_other(), 
      GetArena());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&issharedfile_) -
    reinterpret_cast<char*>(&size_)) + sizeof(issharedfile_));
  // @@protoc_insertion_point(copy_constructor:dm.FileInfoPackage)
}

void FileInfoPackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileInfoPackage_devicemanagement_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  other_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&issharedfile_) -
      reinterpret_cast<char*>(&size_)) + sizeof(issharedfile_));
}

FileInfoPackage::~FileInfoPackage() {
  // @@protoc_insertion_point(destructor:dm.FileInfoPackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileInfoPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  other_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileInfoPackage::ArenaDtor(void* object) {
  FileInfoPackage* _this = reinterpret_cast< FileInfoPackage* >(object);
  (void)_this;
}
void FileInfoPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileInfoPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileInfoPackage& FileInfoPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileInfoPackage_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void FileInfoPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.FileInfoPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  md5_.ClearToEmpty();
  other_.ClearToEmpty();
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issharedfile_) -
      reinterpret_cast<char*>(&size_)) + sizeof(issharedfile_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileInfoPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fileName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.FileInfoPackage.fileName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string md5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_md5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.FileInfoPackage.md5"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes other = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_other();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSharedFile = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          issharedfile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileInfoPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.FileInfoPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.FileInfoPackage.fileName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // string md5 = 2;
  if (this->md5().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_md5().data(), static_cast<int>(this->_internal_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.FileInfoPackage.md5");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_md5(), target);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  // bytes other = 4;
  if (this->other().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_other(), target);
  }

  // bool isSharedFile = 5;
  if (this->issharedfile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_issharedfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.FileInfoPackage)
  return target;
}

size_t FileInfoPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.FileInfoPackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string md5 = 2;
  if (this->md5().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5());
  }

  // bytes other = 4;
  if (this->other().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_other());
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // bool isSharedFile = 5;
  if (this->issharedfile() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileInfoPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.FileInfoPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const FileInfoPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileInfoPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.FileInfoPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.FileInfoPackage)
    MergeFrom(*source);
  }
}

void FileInfoPackage::MergeFrom(const FileInfoPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.FileInfoPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.md5().size() > 0) {
    _internal_set_md5(from._internal_md5());
  }
  if (from.other().size() > 0) {
    _internal_set_other(from._internal_other());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.issharedfile() != 0) {
    _internal_set_issharedfile(from._internal_issharedfile());
  }
}

void FileInfoPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.FileInfoPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfoPackage::CopyFrom(const FileInfoPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.FileInfoPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfoPackage::IsInitialized() const {
  return true;
}

void FileInfoPackage::InternalSwap(FileInfoPackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  md5_.Swap(&other->md5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  other_.Swap(&other->other_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileInfoPackage, issharedfile_)
      + sizeof(FileInfoPackage::issharedfile_)
      - PROTOBUF_FIELD_OFFSET(FileInfoPackage, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileInfoPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RecvReadyPackage::_Internal {
 public:
};

RecvReadyPackage::RecvReadyPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.RecvReadyPackage)
}
RecvReadyPackage::RecvReadyPackage(const RecvReadyPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&issharedfile_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(issharedfile_));
  // @@protoc_insertion_point(copy_constructor:dm.RecvReadyPackage)
}

void RecvReadyPackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecvReadyPackage_devicemanagement_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&issharedfile_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(issharedfile_));
}

RecvReadyPackage::~RecvReadyPackage() {
  // @@protoc_insertion_point(destructor:dm.RecvReadyPackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecvReadyPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecvReadyPackage::ArenaDtor(void* object) {
  RecvReadyPackage* _this = reinterpret_cast< RecvReadyPackage* >(object);
  (void)_this;
}
void RecvReadyPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecvReadyPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecvReadyPackage& RecvReadyPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecvReadyPackage_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void RecvReadyPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.RecvReadyPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issharedfile_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(issharedfile_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecvReadyPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fileName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.RecvReadyPackage.fileName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSharedFile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          issharedfile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvReadyPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.RecvReadyPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.RecvReadyPackage.fileName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  // bool isSharedFile = 3;
  if (this->issharedfile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_issharedfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.RecvReadyPackage)
  return target;
}

size_t RecvReadyPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.RecvReadyPackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  // bool isSharedFile = 3;
  if (this->issharedfile() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecvReadyPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.RecvReadyPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvReadyPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecvReadyPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.RecvReadyPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.RecvReadyPackage)
    MergeFrom(*source);
  }
}

void RecvReadyPackage::MergeFrom(const RecvReadyPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.RecvReadyPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.issharedfile() != 0) {
    _internal_set_issharedfile(from._internal_issharedfile());
  }
}

void RecvReadyPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.RecvReadyPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvReadyPackage::CopyFrom(const RecvReadyPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.RecvReadyPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvReadyPackage::IsInitialized() const {
  return true;
}

void RecvReadyPackage::InternalSwap(RecvReadyPackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecvReadyPackage, issharedfile_)
      + sizeof(RecvReadyPackage::issharedfile_)
      - PROTOBUF_FIELD_OFFSET(RecvReadyPackage, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvReadyPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SharedFileInfo::_Internal {
 public:
};

SharedFileInfo::SharedFileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.SharedFileInfo)
}
SharedFileInfo::SharedFileInfo(const SharedFileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  ::memcpy(&sharetimestamp_, &from.sharetimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&sharetimestamp_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:dm.SharedFileInfo)
}

void SharedFileInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SharedFileInfo_devicemanagement_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sharetimestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&sharetimestamp_)) + sizeof(size_));
}

SharedFileInfo::~SharedFileInfo() {
  // @@protoc_insertion_point(destructor:dm.SharedFileInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SharedFileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SharedFileInfo::ArenaDtor(void* object) {
  SharedFileInfo* _this = reinterpret_cast< SharedFileInfo* >(object);
  (void)_this;
}
void SharedFileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharedFileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SharedFileInfo& SharedFileInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SharedFileInfo_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void SharedFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.SharedFileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  ::memset(&sharetimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&sharetimestamp_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SharedFileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fileName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.SharedFileInfo.fileName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 shareTimeStamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sharetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SharedFileInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.SharedFileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.SharedFileInfo.fileName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // uint64 shareTimeStamp = 2;
  if (this->sharetimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sharetimestamp(), target);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.SharedFileInfo)
  return target;
}

size_t SharedFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.SharedFileInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // uint64 shareTimeStamp = 2;
  if (this->sharetimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sharetimestamp());
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharedFileInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.SharedFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SharedFileInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SharedFileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.SharedFileInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.SharedFileInfo)
    MergeFrom(*source);
  }
}

void SharedFileInfo::MergeFrom(const SharedFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.SharedFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.sharetimestamp() != 0) {
    _internal_set_sharetimestamp(from._internal_sharetimestamp());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void SharedFileInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.SharedFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedFileInfo::CopyFrom(const SharedFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.SharedFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedFileInfo::IsInitialized() const {
  return true;
}

void SharedFileInfo::InternalSwap(SharedFileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharedFileInfo, size_)
      + sizeof(SharedFileInfo::size_)
      - PROTOBUF_FIELD_OFFSET(SharedFileInfo, sharetimestamp_)>(
          reinterpret_cast<char*>(&sharetimestamp_),
          reinterpret_cast<char*>(&other->sharetimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SharedFileInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SharedFileListPackage::_Internal {
 public:
};

SharedFileListPackage::SharedFileListPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sharedfile_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.SharedFileListPackage)
}
SharedFileListPackage::SharedFileListPackage(const SharedFileListPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sharedfile_(from.sharedfile_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dm.SharedFileListPackage)
}

void SharedFileListPackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SharedFileListPackage_devicemanagement_2eproto.base);
}

SharedFileListPackage::~SharedFileListPackage() {
  // @@protoc_insertion_point(destructor:dm.SharedFileListPackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SharedFileListPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SharedFileListPackage::ArenaDtor(void* object) {
  SharedFileListPackage* _this = reinterpret_cast< SharedFileListPackage* >(object);
  (void)_this;
}
void SharedFileListPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharedFileListPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SharedFileListPackage& SharedFileListPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SharedFileListPackage_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void SharedFileListPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.SharedFileListPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sharedfile_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SharedFileListPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .dm.SharedFileInfo sharedFile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sharedfile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SharedFileListPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.SharedFileListPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dm.SharedFileInfo sharedFile = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sharedfile_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sharedfile(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.SharedFileListPackage)
  return target;
}

size_t SharedFileListPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.SharedFileListPackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dm.SharedFileInfo sharedFile = 1;
  total_size += 1UL * this->_internal_sharedfile_size();
  for (const auto& msg : this->sharedfile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharedFileListPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.SharedFileListPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const SharedFileListPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SharedFileListPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.SharedFileListPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.SharedFileListPackage)
    MergeFrom(*source);
  }
}

void SharedFileListPackage::MergeFrom(const SharedFileListPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.SharedFileListPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sharedfile_.MergeFrom(from.sharedfile_);
}

void SharedFileListPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.SharedFileListPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedFileListPackage::CopyFrom(const SharedFileListPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.SharedFileListPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedFileListPackage::IsInitialized() const {
  return true;
}

void SharedFileListPackage::InternalSwap(SharedFileListPackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sharedfile_.InternalSwap(&other->sharedfile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SharedFileListPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestSharedFileListPackage::_Internal {
 public:
};

RequestSharedFileListPackage::RequestSharedFileListPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.RequestSharedFileListPackage)
}
RequestSharedFileListPackage::RequestSharedFileListPackage(const RequestSharedFileListPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reserved_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reserved().empty()) {
    reserved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reserved(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:dm.RequestSharedFileListPackage)
}

void RequestSharedFileListPackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestSharedFileListPackage_devicemanagement_2eproto.base);
  reserved_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequestSharedFileListPackage::~RequestSharedFileListPackage() {
  // @@protoc_insertion_point(destructor:dm.RequestSharedFileListPackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestSharedFileListPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reserved_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestSharedFileListPackage::ArenaDtor(void* object) {
  RequestSharedFileListPackage* _this = reinterpret_cast< RequestSharedFileListPackage* >(object);
  (void)_this;
}
void RequestSharedFileListPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestSharedFileListPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestSharedFileListPackage& RequestSharedFileListPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestSharedFileListPackage_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void RequestSharedFileListPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.RequestSharedFileListPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reserved_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestSharedFileListPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reserved();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.RequestSharedFileListPackage.reserved"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestSharedFileListPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.RequestSharedFileListPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reserved = 1;
  if (this->reserved().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserved().data(), static_cast<int>(this->_internal_reserved().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.RequestSharedFileListPackage.reserved");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reserved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.RequestSharedFileListPackage)
  return target;
}

size_t RequestSharedFileListPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.RequestSharedFileListPackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reserved = 1;
  if (this->reserved().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserved());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestSharedFileListPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.RequestSharedFileListPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestSharedFileListPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestSharedFileListPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.RequestSharedFileListPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.RequestSharedFileListPackage)
    MergeFrom(*source);
  }
}

void RequestSharedFileListPackage::MergeFrom(const RequestSharedFileListPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.RequestSharedFileListPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reserved().size() > 0) {
    _internal_set_reserved(from._internal_reserved());
  }
}

void RequestSharedFileListPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.RequestSharedFileListPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSharedFileListPackage::CopyFrom(const RequestSharedFileListPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.RequestSharedFileListPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSharedFileListPackage::IsInitialized() const {
  return true;
}

void RequestSharedFileListPackage::InternalSwap(RequestSharedFileListPackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reserved_.Swap(&other->reserved_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestSharedFileListPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpgradeStagePackage::_Internal {
 public:
};

UpgradeStagePackage::UpgradeStagePackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.UpgradeStagePackage)
}
UpgradeStagePackage::UpgradeStagePackage(const UpgradeStagePackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stage_ = from.stage_;
  // @@protoc_insertion_point(copy_constructor:dm.UpgradeStagePackage)
}

void UpgradeStagePackage::SharedCtor() {
  stage_ = 0;
}

UpgradeStagePackage::~UpgradeStagePackage() {
  // @@protoc_insertion_point(destructor:dm.UpgradeStagePackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpgradeStagePackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpgradeStagePackage::ArenaDtor(void* object) {
  UpgradeStagePackage* _this = reinterpret_cast< UpgradeStagePackage* >(object);
  (void)_this;
}
void UpgradeStagePackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpgradeStagePackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpgradeStagePackage& UpgradeStagePackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpgradeStagePackage_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void UpgradeStagePackage::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.UpgradeStagePackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpgradeStagePackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpgradeStagePackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.UpgradeStagePackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stage = 1;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.UpgradeStagePackage)
  return target;
}

size_t UpgradeStagePackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.UpgradeStagePackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stage = 1;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpgradeStagePackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.UpgradeStagePackage)
  GOOGLE_DCHECK_NE(&from, this);
  const UpgradeStagePackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpgradeStagePackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.UpgradeStagePackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.UpgradeStagePackage)
    MergeFrom(*source);
  }
}

void UpgradeStagePackage::MergeFrom(const UpgradeStagePackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.UpgradeStagePackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
}

void UpgradeStagePackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.UpgradeStagePackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeStagePackage::CopyFrom(const UpgradeStagePackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.UpgradeStagePackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeStagePackage::IsInitialized() const {
  return true;
}

void UpgradeStagePackage::InternalSwap(UpgradeStagePackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stage_, other->stage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpgradeStagePackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConnectResponsePackage::_Internal {
 public:
};

ConnectResponsePackage::ConnectResponsePackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dm.ConnectResponsePackage)
}
ConnectResponsePackage::ConnectResponsePackage(const ConnectResponsePackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sn().empty()) {
    sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sn(), 
      GetArena());
  }
  serverip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serverip().empty()) {
    serverip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serverip(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:dm.ConnectResponsePackage)
}

void ConnectResponsePackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectResponsePackage_devicemanagement_2eproto.base);
  sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConnectResponsePackage::~ConnectResponsePackage() {
  // @@protoc_insertion_point(destructor:dm.ConnectResponsePackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectResponsePackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectResponsePackage::ArenaDtor(void* object) {
  ConnectResponsePackage* _this = reinterpret_cast< ConnectResponsePackage* >(object);
  (void)_this;
}
void ConnectResponsePackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectResponsePackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectResponsePackage& ConnectResponsePackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectResponsePackage_devicemanagement_2eproto.base);
  return *internal_default_instance();
}


void ConnectResponsePackage::Clear() {
// @@protoc_insertion_point(message_clear_start:dm.ConnectResponsePackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sn_.ClearToEmpty();
  serverip_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectResponsePackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.ConnectResponsePackage.sn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serverIp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_serverip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dm.ConnectResponsePackage.serverIp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectResponsePackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dm.ConnectResponsePackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sn = 1;
  if (this->sn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sn().data(), static_cast<int>(this->_internal_sn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.ConnectResponsePackage.sn");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sn(), target);
  }

  // string serverIp = 2;
  if (this->serverip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverip().data(), static_cast<int>(this->_internal_serverip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dm.ConnectResponsePackage.serverIp");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serverip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dm.ConnectResponsePackage)
  return target;
}

size_t ConnectResponsePackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dm.ConnectResponsePackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sn = 1;
  if (this->sn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sn());
  }

  // string serverIp = 2;
  if (this->serverip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectResponsePackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dm.ConnectResponsePackage)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectResponsePackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectResponsePackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dm.ConnectResponsePackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dm.ConnectResponsePackage)
    MergeFrom(*source);
  }
}

void ConnectResponsePackage::MergeFrom(const ConnectResponsePackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dm.ConnectResponsePackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn().size() > 0) {
    _internal_set_sn(from._internal_sn());
  }
  if (from.serverip().size() > 0) {
    _internal_set_serverip(from._internal_serverip());
  }
}

void ConnectResponsePackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dm.ConnectResponsePackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectResponsePackage::CopyFrom(const ConnectResponsePackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dm.ConnectResponsePackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResponsePackage::IsInitialized() const {
  return true;
}

void ConnectResponsePackage::InternalSwap(ConnectResponsePackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sn_.Swap(&other->sn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serverip_.Swap(&other->serverip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectResponsePackage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dm::TransMsg* Arena::CreateMaybeMessage< ::dm::TransMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::TransMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::CmdPackage* Arena::CreateMaybeMessage< ::dm::CmdPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::CmdPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::CmdPackageV2* Arena::CreateMaybeMessage< ::dm::CmdPackageV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::CmdPackageV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::BroadcastPackage* Arena::CreateMaybeMessage< ::dm::BroadcastPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::BroadcastPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::ConnectPackage* Arena::CreateMaybeMessage< ::dm::ConnectPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::ConnectPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::ResponsePackage* Arena::CreateMaybeMessage< ::dm::ResponsePackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::ResponsePackage >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::StatePackage* Arena::CreateMaybeMessage< ::dm::StatePackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::StatePackage >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::StatusPackage* Arena::CreateMaybeMessage< ::dm::StatusPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::StatusPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::PercentPackage* Arena::CreateMaybeMessage< ::dm::PercentPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::PercentPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::FileRequestPackage* Arena::CreateMaybeMessage< ::dm::FileRequestPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::FileRequestPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::FileInfoPackage* Arena::CreateMaybeMessage< ::dm::FileInfoPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::FileInfoPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::RecvReadyPackage* Arena::CreateMaybeMessage< ::dm::RecvReadyPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::RecvReadyPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::SharedFileInfo* Arena::CreateMaybeMessage< ::dm::SharedFileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::SharedFileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::SharedFileListPackage* Arena::CreateMaybeMessage< ::dm::SharedFileListPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::SharedFileListPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::RequestSharedFileListPackage* Arena::CreateMaybeMessage< ::dm::RequestSharedFileListPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::RequestSharedFileListPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::UpgradeStagePackage* Arena::CreateMaybeMessage< ::dm::UpgradeStagePackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::UpgradeStagePackage >(arena);
}
template<> PROTOBUF_NOINLINE ::dm::ConnectResponsePackage* Arena::CreateMaybeMessage< ::dm::ConnectResponsePackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dm::ConnectResponsePackage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
