// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: devicemanagement.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_devicemanagement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_devicemanagement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_devicemanagement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_devicemanagement_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_devicemanagement_2eproto;
namespace dm {
class BroadcastPackage;
class BroadcastPackageDefaultTypeInternal;
extern BroadcastPackageDefaultTypeInternal _BroadcastPackage_default_instance_;
class CmdPackage;
class CmdPackageDefaultTypeInternal;
extern CmdPackageDefaultTypeInternal _CmdPackage_default_instance_;
class CmdPackageV2;
class CmdPackageV2DefaultTypeInternal;
extern CmdPackageV2DefaultTypeInternal _CmdPackageV2_default_instance_;
class ConnectPackage;
class ConnectPackageDefaultTypeInternal;
extern ConnectPackageDefaultTypeInternal _ConnectPackage_default_instance_;
class ConnectResponsePackage;
class ConnectResponsePackageDefaultTypeInternal;
extern ConnectResponsePackageDefaultTypeInternal _ConnectResponsePackage_default_instance_;
class FileInfoPackage;
class FileInfoPackageDefaultTypeInternal;
extern FileInfoPackageDefaultTypeInternal _FileInfoPackage_default_instance_;
class FileRequestPackage;
class FileRequestPackageDefaultTypeInternal;
extern FileRequestPackageDefaultTypeInternal _FileRequestPackage_default_instance_;
class PercentPackage;
class PercentPackageDefaultTypeInternal;
extern PercentPackageDefaultTypeInternal _PercentPackage_default_instance_;
class RecvReadyPackage;
class RecvReadyPackageDefaultTypeInternal;
extern RecvReadyPackageDefaultTypeInternal _RecvReadyPackage_default_instance_;
class RequestSharedFileListPackage;
class RequestSharedFileListPackageDefaultTypeInternal;
extern RequestSharedFileListPackageDefaultTypeInternal _RequestSharedFileListPackage_default_instance_;
class ResponsePackage;
class ResponsePackageDefaultTypeInternal;
extern ResponsePackageDefaultTypeInternal _ResponsePackage_default_instance_;
class SharedFileInfo;
class SharedFileInfoDefaultTypeInternal;
extern SharedFileInfoDefaultTypeInternal _SharedFileInfo_default_instance_;
class SharedFileListPackage;
class SharedFileListPackageDefaultTypeInternal;
extern SharedFileListPackageDefaultTypeInternal _SharedFileListPackage_default_instance_;
class StatePackage;
class StatePackageDefaultTypeInternal;
extern StatePackageDefaultTypeInternal _StatePackage_default_instance_;
class StatusPackage;
class StatusPackageDefaultTypeInternal;
extern StatusPackageDefaultTypeInternal _StatusPackage_default_instance_;
class TransMsg;
class TransMsgDefaultTypeInternal;
extern TransMsgDefaultTypeInternal _TransMsg_default_instance_;
class UpgradeStagePackage;
class UpgradeStagePackageDefaultTypeInternal;
extern UpgradeStagePackageDefaultTypeInternal _UpgradeStagePackage_default_instance_;
}  // namespace dm
PROTOBUF_NAMESPACE_OPEN
template<> ::dm::BroadcastPackage* Arena::CreateMaybeMessage<::dm::BroadcastPackage>(Arena*);
template<> ::dm::CmdPackage* Arena::CreateMaybeMessage<::dm::CmdPackage>(Arena*);
template<> ::dm::CmdPackageV2* Arena::CreateMaybeMessage<::dm::CmdPackageV2>(Arena*);
template<> ::dm::ConnectPackage* Arena::CreateMaybeMessage<::dm::ConnectPackage>(Arena*);
template<> ::dm::ConnectResponsePackage* Arena::CreateMaybeMessage<::dm::ConnectResponsePackage>(Arena*);
template<> ::dm::FileInfoPackage* Arena::CreateMaybeMessage<::dm::FileInfoPackage>(Arena*);
template<> ::dm::FileRequestPackage* Arena::CreateMaybeMessage<::dm::FileRequestPackage>(Arena*);
template<> ::dm::PercentPackage* Arena::CreateMaybeMessage<::dm::PercentPackage>(Arena*);
template<> ::dm::RecvReadyPackage* Arena::CreateMaybeMessage<::dm::RecvReadyPackage>(Arena*);
template<> ::dm::RequestSharedFileListPackage* Arena::CreateMaybeMessage<::dm::RequestSharedFileListPackage>(Arena*);
template<> ::dm::ResponsePackage* Arena::CreateMaybeMessage<::dm::ResponsePackage>(Arena*);
template<> ::dm::SharedFileInfo* Arena::CreateMaybeMessage<::dm::SharedFileInfo>(Arena*);
template<> ::dm::SharedFileListPackage* Arena::CreateMaybeMessage<::dm::SharedFileListPackage>(Arena*);
template<> ::dm::StatePackage* Arena::CreateMaybeMessage<::dm::StatePackage>(Arena*);
template<> ::dm::StatusPackage* Arena::CreateMaybeMessage<::dm::StatusPackage>(Arena*);
template<> ::dm::TransMsg* Arena::CreateMaybeMessage<::dm::TransMsg>(Arena*);
template<> ::dm::UpgradeStagePackage* Arena::CreateMaybeMessage<::dm::UpgradeStagePackage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dm {

enum TransMsg_PACKAGETYPE : int {
  TransMsg_PACKAGETYPE_UNKNOWNPACKAGE = 0,
  TransMsg_PACKAGETYPE_CMDPACKAGE = 1,
  TransMsg_PACKAGETYPE_BROADCASTPACKAGE = 2,
  TransMsg_PACKAGETYPE_CONNECTPACKAGE = 3,
  TransMsg_PACKAGETYPE_RESPONSEPACKAGE = 4,
  TransMsg_PACKAGETYPE_STATEPACKAGE = 5,
  TransMsg_PACKAGETYPE_PERCENTPACKAGE = 6,
  TransMsg_PACKAGETYPE_FILEREQUESTPACKAGE = 7,
  TransMsg_PACKAGETYPE_FILEINFOPACKAGE = 8,
  TransMsg_PACKAGETYPE_RECVREADYPACKAGE = 9,
  TransMsg_PACKAGETYPE_FILECONTENTPACKAGE = 10,
  TransMsg_PACKAGETYPE_REQUESTSHAREDFILELISTPACKAGE = 11,
  TransMsg_PACKAGETYPE_SHAREDFILELISTPACKAGE = 12,
  TransMsg_PACKAGETYPE_UPGRADESTAGEPACKAGE = 13,
  TransMsg_PACKAGETYPE_CONNECTRESPONSEPACKAGE = 14,
  TransMsg_PACKAGETYPE_STATUSPACKAGE = 15,
  TransMsg_PACKAGETYPE_CMDPACKAGE_V2 = 16,
  TransMsg_PACKAGETYPE_TransMsg_PACKAGETYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransMsg_PACKAGETYPE_TransMsg_PACKAGETYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransMsg_PACKAGETYPE_IsValid(int value);
constexpr TransMsg_PACKAGETYPE TransMsg_PACKAGETYPE_PACKAGETYPE_MIN = TransMsg_PACKAGETYPE_UNKNOWNPACKAGE;
constexpr TransMsg_PACKAGETYPE TransMsg_PACKAGETYPE_PACKAGETYPE_MAX = TransMsg_PACKAGETYPE_CMDPACKAGE_V2;
constexpr int TransMsg_PACKAGETYPE_PACKAGETYPE_ARRAYSIZE = TransMsg_PACKAGETYPE_PACKAGETYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransMsg_PACKAGETYPE_descriptor();
template<typename T>
inline const std::string& TransMsg_PACKAGETYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransMsg_PACKAGETYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransMsg_PACKAGETYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransMsg_PACKAGETYPE_descriptor(), enum_t_value);
}
inline bool TransMsg_PACKAGETYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransMsg_PACKAGETYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransMsg_PACKAGETYPE>(
    TransMsg_PACKAGETYPE_descriptor(), name, value);
}
enum CmdPackage_CMDTYPE : int {
  CmdPackage_CMDTYPE_UNKNOWN = 0,
  CmdPackage_CMDTYPE_SHUTDOWN = 1,
  CmdPackage_CMDTYPE_REBOOT = 2,
  CmdPackage_CMDTYPE_RESET = 3,
  CmdPackage_CMDTYPE_LOCK = 4,
  CmdPackage_CMDTYPE_UPGRADE = 5,
  CmdPackage_CMDTYPE_CANCELUPGRADE = 6,
  CmdPackage_CMDTYPE_CmdPackage_CMDTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CmdPackage_CMDTYPE_CmdPackage_CMDTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CmdPackage_CMDTYPE_IsValid(int value);
constexpr CmdPackage_CMDTYPE CmdPackage_CMDTYPE_CMDTYPE_MIN = CmdPackage_CMDTYPE_UNKNOWN;
constexpr CmdPackage_CMDTYPE CmdPackage_CMDTYPE_CMDTYPE_MAX = CmdPackage_CMDTYPE_CANCELUPGRADE;
constexpr int CmdPackage_CMDTYPE_CMDTYPE_ARRAYSIZE = CmdPackage_CMDTYPE_CMDTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdPackage_CMDTYPE_descriptor();
template<typename T>
inline const std::string& CmdPackage_CMDTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdPackage_CMDTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdPackage_CMDTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdPackage_CMDTYPE_descriptor(), enum_t_value);
}
inline bool CmdPackage_CMDTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CmdPackage_CMDTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdPackage_CMDTYPE>(
    CmdPackage_CMDTYPE_descriptor(), name, value);
}
enum CmdPackageV2_CMDTYPE : int {
  CmdPackageV2_CMDTYPE_UNKNOWN = 0,
  CmdPackageV2_CMDTYPE_SHUTDOWN = 1,
  CmdPackageV2_CMDTYPE_REBOOT = 2,
  CmdPackageV2_CMDTYPE_RESET = 3,
  CmdPackageV2_CMDTYPE_LOCK = 4,
  CmdPackageV2_CMDTYPE_UPGRADE = 5,
  CmdPackageV2_CMDTYPE_CANCELUPGRADE = 6,
  CmdPackageV2_CMDTYPE_CmdPackageV2_CMDTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CmdPackageV2_CMDTYPE_CmdPackageV2_CMDTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CmdPackageV2_CMDTYPE_IsValid(int value);
constexpr CmdPackageV2_CMDTYPE CmdPackageV2_CMDTYPE_CMDTYPE_MIN = CmdPackageV2_CMDTYPE_UNKNOWN;
constexpr CmdPackageV2_CMDTYPE CmdPackageV2_CMDTYPE_CMDTYPE_MAX = CmdPackageV2_CMDTYPE_CANCELUPGRADE;
constexpr int CmdPackageV2_CMDTYPE_CMDTYPE_ARRAYSIZE = CmdPackageV2_CMDTYPE_CMDTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdPackageV2_CMDTYPE_descriptor();
template<typename T>
inline const std::string& CmdPackageV2_CMDTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdPackageV2_CMDTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdPackageV2_CMDTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdPackageV2_CMDTYPE_descriptor(), enum_t_value);
}
inline bool CmdPackageV2_CMDTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CmdPackageV2_CMDTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdPackageV2_CMDTYPE>(
    CmdPackageV2_CMDTYPE_descriptor(), name, value);
}
enum ERRORCODE : int {
  SUCCESS = 0,
  RECEIVED = 1,
  ERRORCODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ERRORCODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ERRORCODE_IsValid(int value);
constexpr ERRORCODE ERRORCODE_MIN = SUCCESS;
constexpr ERRORCODE ERRORCODE_MAX = RECEIVED;
constexpr int ERRORCODE_ARRAYSIZE = ERRORCODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERRORCODE_descriptor();
template<typename T>
inline const std::string& ERRORCODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ERRORCODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ERRORCODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ERRORCODE_descriptor(), enum_t_value);
}
inline bool ERRORCODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ERRORCODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ERRORCODE>(
    ERRORCODE_descriptor(), name, value);
}
// ===================================================================

class TransMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.TransMsg) */ {
 public:
  inline TransMsg() : TransMsg(nullptr) {}
  virtual ~TransMsg();

  TransMsg(const TransMsg& from);
  TransMsg(TransMsg&& from) noexcept
    : TransMsg() {
    *this = ::std::move(from);
  }

  inline TransMsg& operator=(const TransMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsg& operator=(TransMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsg& default_instance();

  static inline const TransMsg* internal_default_instance() {
    return reinterpret_cast<const TransMsg*>(
               &_TransMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransMsg& a, TransMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TransMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransMsg* New() const final {
    return CreateMaybeMessage<TransMsg>(nullptr);
  }

  TransMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsg& from);
  void MergeFrom(const TransMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.TransMsg";
  }
  protected:
  explicit TransMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TransMsg_PACKAGETYPE PACKAGETYPE;
  static constexpr PACKAGETYPE UNKNOWNPACKAGE =
    TransMsg_PACKAGETYPE_UNKNOWNPACKAGE;
  static constexpr PACKAGETYPE CMDPACKAGE =
    TransMsg_PACKAGETYPE_CMDPACKAGE;
  static constexpr PACKAGETYPE BROADCASTPACKAGE =
    TransMsg_PACKAGETYPE_BROADCASTPACKAGE;
  static constexpr PACKAGETYPE CONNECTPACKAGE =
    TransMsg_PACKAGETYPE_CONNECTPACKAGE;
  static constexpr PACKAGETYPE RESPONSEPACKAGE =
    TransMsg_PACKAGETYPE_RESPONSEPACKAGE;
  static constexpr PACKAGETYPE STATEPACKAGE =
    TransMsg_PACKAGETYPE_STATEPACKAGE;
  static constexpr PACKAGETYPE PERCENTPACKAGE =
    TransMsg_PACKAGETYPE_PERCENTPACKAGE;
  static constexpr PACKAGETYPE FILEREQUESTPACKAGE =
    TransMsg_PACKAGETYPE_FILEREQUESTPACKAGE;
  static constexpr PACKAGETYPE FILEINFOPACKAGE =
    TransMsg_PACKAGETYPE_FILEINFOPACKAGE;
  static constexpr PACKAGETYPE RECVREADYPACKAGE =
    TransMsg_PACKAGETYPE_RECVREADYPACKAGE;
  static constexpr PACKAGETYPE FILECONTENTPACKAGE =
    TransMsg_PACKAGETYPE_FILECONTENTPACKAGE;
  static constexpr PACKAGETYPE REQUESTSHAREDFILELISTPACKAGE =
    TransMsg_PACKAGETYPE_REQUESTSHAREDFILELISTPACKAGE;
  static constexpr PACKAGETYPE SHAREDFILELISTPACKAGE =
    TransMsg_PACKAGETYPE_SHAREDFILELISTPACKAGE;
  static constexpr PACKAGETYPE UPGRADESTAGEPACKAGE =
    TransMsg_PACKAGETYPE_UPGRADESTAGEPACKAGE;
  static constexpr PACKAGETYPE CONNECTRESPONSEPACKAGE =
    TransMsg_PACKAGETYPE_CONNECTRESPONSEPACKAGE;
  static constexpr PACKAGETYPE STATUSPACKAGE =
    TransMsg_PACKAGETYPE_STATUSPACKAGE;
  static constexpr PACKAGETYPE CMDPACKAGE_V2 =
    TransMsg_PACKAGETYPE_CMDPACKAGE_V2;
  static inline bool PACKAGETYPE_IsValid(int value) {
    return TransMsg_PACKAGETYPE_IsValid(value);
  }
  static constexpr PACKAGETYPE PACKAGETYPE_MIN =
    TransMsg_PACKAGETYPE_PACKAGETYPE_MIN;
  static constexpr PACKAGETYPE PACKAGETYPE_MAX =
    TransMsg_PACKAGETYPE_PACKAGETYPE_MAX;
  static constexpr int PACKAGETYPE_ARRAYSIZE =
    TransMsg_PACKAGETYPE_PACKAGETYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PACKAGETYPE_descriptor() {
    return TransMsg_PACKAGETYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& PACKAGETYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PACKAGETYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PACKAGETYPE_Name.");
    return TransMsg_PACKAGETYPE_Name(enum_t_value);
  }
  static inline bool PACKAGETYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PACKAGETYPE* value) {
    return TransMsg_PACKAGETYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPackageContentFieldNumber = 2,
    kPackageTypeFieldNumber = 1,
  };
  // bytes packageContent = 2;
  void clear_packagecontent();
  const std::string& packagecontent() const;
  void set_packagecontent(const std::string& value);
  void set_packagecontent(std::string&& value);
  void set_packagecontent(const char* value);
  void set_packagecontent(const void* value, size_t size);
  std::string* mutable_packagecontent();
  std::string* release_packagecontent();
  void set_allocated_packagecontent(std::string* packagecontent);
  private:
  const std::string& _internal_packagecontent() const;
  void _internal_set_packagecontent(const std::string& value);
  std::string* _internal_mutable_packagecontent();
  public:

  // .dm.TransMsg.PACKAGETYPE packageType = 1;
  void clear_packagetype();
  ::dm::TransMsg_PACKAGETYPE packagetype() const;
  void set_packagetype(::dm::TransMsg_PACKAGETYPE value);
  private:
  ::dm::TransMsg_PACKAGETYPE _internal_packagetype() const;
  void _internal_set_packagetype(::dm::TransMsg_PACKAGETYPE value);
  public:

  // @@protoc_insertion_point(class_scope:dm.TransMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packagecontent_;
  int packagetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class CmdPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.CmdPackage) */ {
 public:
  inline CmdPackage() : CmdPackage(nullptr) {}
  virtual ~CmdPackage();

  CmdPackage(const CmdPackage& from);
  CmdPackage(CmdPackage&& from) noexcept
    : CmdPackage() {
    *this = ::std::move(from);
  }

  inline CmdPackage& operator=(const CmdPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdPackage& operator=(CmdPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdPackage& default_instance();

  static inline const CmdPackage* internal_default_instance() {
    return reinterpret_cast<const CmdPackage*>(
               &_CmdPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CmdPackage& a, CmdPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CmdPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdPackage* New() const final {
    return CreateMaybeMessage<CmdPackage>(nullptr);
  }

  CmdPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdPackage& from);
  void MergeFrom(const CmdPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.CmdPackage";
  }
  protected:
  explicit CmdPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CmdPackage_CMDTYPE CMDTYPE;
  static constexpr CMDTYPE UNKNOWN =
    CmdPackage_CMDTYPE_UNKNOWN;
  static constexpr CMDTYPE SHUTDOWN =
    CmdPackage_CMDTYPE_SHUTDOWN;
  static constexpr CMDTYPE REBOOT =
    CmdPackage_CMDTYPE_REBOOT;
  static constexpr CMDTYPE RESET =
    CmdPackage_CMDTYPE_RESET;
  static constexpr CMDTYPE LOCK =
    CmdPackage_CMDTYPE_LOCK;
  static constexpr CMDTYPE UPGRADE =
    CmdPackage_CMDTYPE_UPGRADE;
  static constexpr CMDTYPE CANCELUPGRADE =
    CmdPackage_CMDTYPE_CANCELUPGRADE;
  static inline bool CMDTYPE_IsValid(int value) {
    return CmdPackage_CMDTYPE_IsValid(value);
  }
  static constexpr CMDTYPE CMDTYPE_MIN =
    CmdPackage_CMDTYPE_CMDTYPE_MIN;
  static constexpr CMDTYPE CMDTYPE_MAX =
    CmdPackage_CMDTYPE_CMDTYPE_MAX;
  static constexpr int CMDTYPE_ARRAYSIZE =
    CmdPackage_CMDTYPE_CMDTYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMDTYPE_descriptor() {
    return CmdPackage_CMDTYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& CMDTYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMDTYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMDTYPE_Name.");
    return CmdPackage_CMDTYPE_Name(enum_t_value);
  }
  static inline bool CMDTYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CMDTYPE* value) {
    return CmdPackage_CMDTYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 3,
    kImgNameFieldNumber = 4,
    kCmdFieldNumber = 1,
    kLockFieldNumber = 2,
    kSaveUserDataFieldNumber = 5,
  };
  // string version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string imgName = 4;
  bool has_imgname() const;
  private:
  bool _internal_has_imgname() const;
  public:
  void clear_imgname();
  const std::string& imgname() const;
  void set_imgname(const std::string& value);
  void set_imgname(std::string&& value);
  void set_imgname(const char* value);
  void set_imgname(const char* value, size_t size);
  std::string* mutable_imgname();
  std::string* release_imgname();
  void set_allocated_imgname(std::string* imgname);
  private:
  const std::string& _internal_imgname() const;
  void _internal_set_imgname(const std::string& value);
  std::string* _internal_mutable_imgname();
  public:

  // .dm.CmdPackage.CMDTYPE cmd = 1;
  void clear_cmd();
  ::dm::CmdPackage_CMDTYPE cmd() const;
  void set_cmd(::dm::CmdPackage_CMDTYPE value);
  private:
  ::dm::CmdPackage_CMDTYPE _internal_cmd() const;
  void _internal_set_cmd(::dm::CmdPackage_CMDTYPE value);
  public:

  // bool lock = 2;
  bool has_lock() const;
  private:
  bool _internal_has_lock() const;
  public:
  void clear_lock();
  bool lock() const;
  void set_lock(bool value);
  private:
  bool _internal_lock() const;
  void _internal_set_lock(bool value);
  public:

  // bool saveUserData = 5;
  bool has_saveuserdata() const;
  private:
  bool _internal_has_saveuserdata() const;
  public:
  void clear_saveuserdata();
  bool saveuserdata() const;
  void set_saveuserdata(bool value);
  private:
  bool _internal_saveuserdata() const;
  void _internal_set_saveuserdata(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dm.CmdPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imgname_;
  int cmd_;
  bool lock_;
  bool saveuserdata_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class CmdPackageV2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.CmdPackageV2) */ {
 public:
  inline CmdPackageV2() : CmdPackageV2(nullptr) {}
  virtual ~CmdPackageV2();

  CmdPackageV2(const CmdPackageV2& from);
  CmdPackageV2(CmdPackageV2&& from) noexcept
    : CmdPackageV2() {
    *this = ::std::move(from);
  }

  inline CmdPackageV2& operator=(const CmdPackageV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdPackageV2& operator=(CmdPackageV2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdPackageV2& default_instance();

  static inline const CmdPackageV2* internal_default_instance() {
    return reinterpret_cast<const CmdPackageV2*>(
               &_CmdPackageV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CmdPackageV2& a, CmdPackageV2& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdPackageV2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CmdPackageV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdPackageV2* New() const final {
    return CreateMaybeMessage<CmdPackageV2>(nullptr);
  }

  CmdPackageV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdPackageV2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdPackageV2& from);
  void MergeFrom(const CmdPackageV2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdPackageV2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.CmdPackageV2";
  }
  protected:
  explicit CmdPackageV2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CmdPackageV2_CMDTYPE CMDTYPE;
  static constexpr CMDTYPE UNKNOWN =
    CmdPackageV2_CMDTYPE_UNKNOWN;
  static constexpr CMDTYPE SHUTDOWN =
    CmdPackageV2_CMDTYPE_SHUTDOWN;
  static constexpr CMDTYPE REBOOT =
    CmdPackageV2_CMDTYPE_REBOOT;
  static constexpr CMDTYPE RESET =
    CmdPackageV2_CMDTYPE_RESET;
  static constexpr CMDTYPE LOCK =
    CmdPackageV2_CMDTYPE_LOCK;
  static constexpr CMDTYPE UPGRADE =
    CmdPackageV2_CMDTYPE_UPGRADE;
  static constexpr CMDTYPE CANCELUPGRADE =
    CmdPackageV2_CMDTYPE_CANCELUPGRADE;
  static inline bool CMDTYPE_IsValid(int value) {
    return CmdPackageV2_CMDTYPE_IsValid(value);
  }
  static constexpr CMDTYPE CMDTYPE_MIN =
    CmdPackageV2_CMDTYPE_CMDTYPE_MIN;
  static constexpr CMDTYPE CMDTYPE_MAX =
    CmdPackageV2_CMDTYPE_CMDTYPE_MAX;
  static constexpr int CMDTYPE_ARRAYSIZE =
    CmdPackageV2_CMDTYPE_CMDTYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMDTYPE_descriptor() {
    return CmdPackageV2_CMDTYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& CMDTYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMDTYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMDTYPE_Name.");
    return CmdPackageV2_CMDTYPE_Name(enum_t_value);
  }
  static inline bool CMDTYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CMDTYPE* value) {
    return CmdPackageV2_CMDTYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 2,
    kCmdFieldNumber = 1,
  };
  // bytes parameters = 2;
  void clear_parameters();
  const std::string& parameters() const;
  void set_parameters(const std::string& value);
  void set_parameters(std::string&& value);
  void set_parameters(const char* value);
  void set_parameters(const void* value, size_t size);
  std::string* mutable_parameters();
  std::string* release_parameters();
  void set_allocated_parameters(std::string* parameters);
  private:
  const std::string& _internal_parameters() const;
  void _internal_set_parameters(const std::string& value);
  std::string* _internal_mutable_parameters();
  public:

  // .dm.CmdPackageV2.CMDTYPE cmd = 1;
  void clear_cmd();
  ::dm::CmdPackageV2_CMDTYPE cmd() const;
  void set_cmd(::dm::CmdPackageV2_CMDTYPE value);
  private:
  ::dm::CmdPackageV2_CMDTYPE _internal_cmd() const;
  void _internal_set_cmd(::dm::CmdPackageV2_CMDTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:dm.CmdPackageV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameters_;
  int cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class BroadcastPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.BroadcastPackage) */ {
 public:
  inline BroadcastPackage() : BroadcastPackage(nullptr) {}
  virtual ~BroadcastPackage();

  BroadcastPackage(const BroadcastPackage& from);
  BroadcastPackage(BroadcastPackage&& from) noexcept
    : BroadcastPackage() {
    *this = ::std::move(from);
  }

  inline BroadcastPackage& operator=(const BroadcastPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastPackage& operator=(BroadcastPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastPackage& default_instance();

  static inline const BroadcastPackage* internal_default_instance() {
    return reinterpret_cast<const BroadcastPackage*>(
               &_BroadcastPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BroadcastPackage& a, BroadcastPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastPackage* New() const final {
    return CreateMaybeMessage<BroadcastPackage>(nullptr);
  }

  BroadcastPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastPackage& from);
  void MergeFrom(const BroadcastPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.BroadcastPackage";
  }
  protected:
  explicit BroadcastPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:dm.BroadcastPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class ConnectPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.ConnectPackage) */ {
 public:
  inline ConnectPackage() : ConnectPackage(nullptr) {}
  virtual ~ConnectPackage();

  ConnectPackage(const ConnectPackage& from);
  ConnectPackage(ConnectPackage&& from) noexcept
    : ConnectPackage() {
    *this = ::std::move(from);
  }

  inline ConnectPackage& operator=(const ConnectPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectPackage& operator=(ConnectPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectPackage& default_instance();

  static inline const ConnectPackage* internal_default_instance() {
    return reinterpret_cast<const ConnectPackage*>(
               &_ConnectPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConnectPackage& a, ConnectPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectPackage* New() const final {
    return CreateMaybeMessage<ConnectPackage>(nullptr);
  }

  ConnectPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectPackage& from);
  void MergeFrom(const ConnectPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.ConnectPackage";
  }
  protected:
  explicit ConnectPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectFieldNumber = 1,
  };
  // bool connect = 1;
  void clear_connect();
  bool connect() const;
  void set_connect(bool value);
  private:
  bool _internal_connect() const;
  void _internal_set_connect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dm.ConnectPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool connect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class ResponsePackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.ResponsePackage) */ {
 public:
  inline ResponsePackage() : ResponsePackage(nullptr) {}
  virtual ~ResponsePackage();

  ResponsePackage(const ResponsePackage& from);
  ResponsePackage(ResponsePackage&& from) noexcept
    : ResponsePackage() {
    *this = ::std::move(from);
  }

  inline ResponsePackage& operator=(const ResponsePackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponsePackage& operator=(ResponsePackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponsePackage& default_instance();

  static inline const ResponsePackage* internal_default_instance() {
    return reinterpret_cast<const ResponsePackage*>(
               &_ResponsePackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResponsePackage& a, ResponsePackage& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponsePackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponsePackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponsePackage* New() const final {
    return CreateMaybeMessage<ResponsePackage>(nullptr);
  }

  ResponsePackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponsePackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponsePackage& from);
  void MergeFrom(const ResponsePackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponsePackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.ResponsePackage";
  }
  protected:
  explicit ResponsePackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dm.ResponsePackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class StatePackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.StatePackage) */ {
 public:
  inline StatePackage() : StatePackage(nullptr) {}
  virtual ~StatePackage();

  StatePackage(const StatePackage& from);
  StatePackage(StatePackage&& from) noexcept
    : StatePackage() {
    *this = ::std::move(from);
  }

  inline StatePackage& operator=(const StatePackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatePackage& operator=(StatePackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatePackage& default_instance();

  static inline const StatePackage* internal_default_instance() {
    return reinterpret_cast<const StatePackage*>(
               &_StatePackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StatePackage& a, StatePackage& b) {
    a.Swap(&b);
  }
  inline void Swap(StatePackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatePackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatePackage* New() const final {
    return CreateMaybeMessage<StatePackage>(nullptr);
  }

  StatePackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatePackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatePackage& from);
  void MergeFrom(const StatePackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatePackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.StatePackage";
  }
  protected:
  explicit StatePackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 3,
    kVersionFieldNumber = 5,
    kPowerFieldNumber = 1,
    kChargingFieldNumber = 2,
    kLockFieldNumber = 4,
    kStateFieldNumber = 6,
  };
  // string sn = 3;
  void clear_sn();
  const std::string& sn() const;
  void set_sn(const std::string& value);
  void set_sn(std::string&& value);
  void set_sn(const char* value);
  void set_sn(const char* value, size_t size);
  std::string* mutable_sn();
  std::string* release_sn();
  void set_allocated_sn(std::string* sn);
  private:
  const std::string& _internal_sn() const;
  void _internal_set_sn(const std::string& value);
  std::string* _internal_mutable_sn();
  public:

  // string version = 5;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // int32 power = 1;
  void clear_power();
  ::PROTOBUF_NAMESPACE_ID::int32 power() const;
  void set_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_power() const;
  void _internal_set_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool charging = 2;
  void clear_charging();
  bool charging() const;
  void set_charging(bool value);
  private:
  bool _internal_charging() const;
  void _internal_set_charging(bool value);
  public:

  // bool lock = 4;
  void clear_lock();
  bool lock() const;
  void set_lock(bool value);
  private:
  bool _internal_lock() const;
  void _internal_set_lock(bool value);
  public:

  // int32 state = 6;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dm.StatePackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::int32 power_;
  bool charging_;
  bool lock_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class StatusPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.StatusPackage) */ {
 public:
  inline StatusPackage() : StatusPackage(nullptr) {}
  virtual ~StatusPackage();

  StatusPackage(const StatusPackage& from);
  StatusPackage(StatusPackage&& from) noexcept
    : StatusPackage() {
    *this = ::std::move(from);
  }

  inline StatusPackage& operator=(const StatusPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusPackage& operator=(StatusPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusPackage& default_instance();

  static inline const StatusPackage* internal_default_instance() {
    return reinterpret_cast<const StatusPackage*>(
               &_StatusPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StatusPackage& a, StatusPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusPackage* New() const final {
    return CreateMaybeMessage<StatusPackage>(nullptr);
  }

  StatusPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusPackage& from);
  void MergeFrom(const StatusPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.StatusPackage";
  }
  protected:
  explicit StatusPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 3,
    kVersionFieldNumber = 5,
    kPowerFieldNumber = 1,
    kChargingFieldNumber = 2,
    kLockFieldNumber = 4,
    kStateFieldNumber = 6,
    kDeviceTypeFieldNumber = 7,
  };
  // string sn = 3;
  void clear_sn();
  const std::string& sn() const;
  void set_sn(const std::string& value);
  void set_sn(std::string&& value);
  void set_sn(const char* value);
  void set_sn(const char* value, size_t size);
  std::string* mutable_sn();
  std::string* release_sn();
  void set_allocated_sn(std::string* sn);
  private:
  const std::string& _internal_sn() const;
  void _internal_set_sn(const std::string& value);
  std::string* _internal_mutable_sn();
  public:

  // string version = 5;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // int32 power = 1;
  void clear_power();
  ::PROTOBUF_NAMESPACE_ID::int32 power() const;
  void set_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_power() const;
  void _internal_set_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool charging = 2;
  void clear_charging();
  bool charging() const;
  void set_charging(bool value);
  private:
  bool _internal_charging() const;
  void _internal_set_charging(bool value);
  public:

  // bool lock = 4;
  void clear_lock();
  bool lock() const;
  void set_lock(bool value);
  private:
  bool _internal_lock() const;
  void _internal_set_lock(bool value);
  public:

  // int32 state = 6;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 deviceType = 7;
  void clear_devicetype();
  ::PROTOBUF_NAMESPACE_ID::int32 devicetype() const;
  void set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_devicetype() const;
  void _internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dm.StatusPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::int32 power_;
  bool charging_;
  bool lock_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 devicetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class PercentPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.PercentPackage) */ {
 public:
  inline PercentPackage() : PercentPackage(nullptr) {}
  virtual ~PercentPackage();

  PercentPackage(const PercentPackage& from);
  PercentPackage(PercentPackage&& from) noexcept
    : PercentPackage() {
    *this = ::std::move(from);
  }

  inline PercentPackage& operator=(const PercentPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PercentPackage& operator=(PercentPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PercentPackage& default_instance();

  static inline const PercentPackage* internal_default_instance() {
    return reinterpret_cast<const PercentPackage*>(
               &_PercentPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PercentPackage& a, PercentPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(PercentPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PercentPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PercentPackage* New() const final {
    return CreateMaybeMessage<PercentPackage>(nullptr);
  }

  PercentPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PercentPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PercentPackage& from);
  void MergeFrom(const PercentPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PercentPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.PercentPackage";
  }
  protected:
  explicit PercentPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPercentageFieldNumber = 1,
  };
  // int32 percentage = 1;
  void clear_percentage();
  ::PROTOBUF_NAMESPACE_ID::int32 percentage() const;
  void set_percentage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_percentage() const;
  void _internal_set_percentage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dm.PercentPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 percentage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class FileRequestPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.FileRequestPackage) */ {
 public:
  inline FileRequestPackage() : FileRequestPackage(nullptr) {}
  virtual ~FileRequestPackage();

  FileRequestPackage(const FileRequestPackage& from);
  FileRequestPackage(FileRequestPackage&& from) noexcept
    : FileRequestPackage() {
    *this = ::std::move(from);
  }

  inline FileRequestPackage& operator=(const FileRequestPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileRequestPackage& operator=(FileRequestPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileRequestPackage& default_instance();

  static inline const FileRequestPackage* internal_default_instance() {
    return reinterpret_cast<const FileRequestPackage*>(
               &_FileRequestPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FileRequestPackage& a, FileRequestPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(FileRequestPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileRequestPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileRequestPackage* New() const final {
    return CreateMaybeMessage<FileRequestPackage>(nullptr);
  }

  FileRequestPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileRequestPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileRequestPackage& from);
  void MergeFrom(const FileRequestPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileRequestPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.FileRequestPackage";
  }
  protected:
  explicit FileRequestPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kIsSharedFileFieldNumber = 2,
  };
  // string fileName = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bool isSharedFile = 2;
  void clear_issharedfile();
  bool issharedfile() const;
  void set_issharedfile(bool value);
  private:
  bool _internal_issharedfile() const;
  void _internal_set_issharedfile(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dm.FileRequestPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  bool issharedfile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class FileInfoPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.FileInfoPackage) */ {
 public:
  inline FileInfoPackage() : FileInfoPackage(nullptr) {}
  virtual ~FileInfoPackage();

  FileInfoPackage(const FileInfoPackage& from);
  FileInfoPackage(FileInfoPackage&& from) noexcept
    : FileInfoPackage() {
    *this = ::std::move(from);
  }

  inline FileInfoPackage& operator=(const FileInfoPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfoPackage& operator=(FileInfoPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileInfoPackage& default_instance();

  static inline const FileInfoPackage* internal_default_instance() {
    return reinterpret_cast<const FileInfoPackage*>(
               &_FileInfoPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FileInfoPackage& a, FileInfoPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfoPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfoPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfoPackage* New() const final {
    return CreateMaybeMessage<FileInfoPackage>(nullptr);
  }

  FileInfoPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfoPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileInfoPackage& from);
  void MergeFrom(const FileInfoPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfoPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.FileInfoPackage";
  }
  protected:
  explicit FileInfoPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kMd5FieldNumber = 2,
    kOtherFieldNumber = 4,
    kSizeFieldNumber = 3,
    kIsSharedFileFieldNumber = 5,
  };
  // string fileName = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string md5 = 2;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // bytes other = 4;
  void clear_other();
  const std::string& other() const;
  void set_other(const std::string& value);
  void set_other(std::string&& value);
  void set_other(const char* value);
  void set_other(const void* value, size_t size);
  std::string* mutable_other();
  std::string* release_other();
  void set_allocated_other(std::string* other);
  private:
  const std::string& _internal_other() const;
  void _internal_set_other(const std::string& value);
  std::string* _internal_mutable_other();
  public:

  // uint64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool isSharedFile = 5;
  void clear_issharedfile();
  bool issharedfile() const;
  void set_issharedfile(bool value);
  private:
  bool _internal_issharedfile() const;
  void _internal_set_issharedfile(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dm.FileInfoPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr other_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  bool issharedfile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class RecvReadyPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.RecvReadyPackage) */ {
 public:
  inline RecvReadyPackage() : RecvReadyPackage(nullptr) {}
  virtual ~RecvReadyPackage();

  RecvReadyPackage(const RecvReadyPackage& from);
  RecvReadyPackage(RecvReadyPackage&& from) noexcept
    : RecvReadyPackage() {
    *this = ::std::move(from);
  }

  inline RecvReadyPackage& operator=(const RecvReadyPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecvReadyPackage& operator=(RecvReadyPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecvReadyPackage& default_instance();

  static inline const RecvReadyPackage* internal_default_instance() {
    return reinterpret_cast<const RecvReadyPackage*>(
               &_RecvReadyPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RecvReadyPackage& a, RecvReadyPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(RecvReadyPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecvReadyPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecvReadyPackage* New() const final {
    return CreateMaybeMessage<RecvReadyPackage>(nullptr);
  }

  RecvReadyPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecvReadyPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecvReadyPackage& from);
  void MergeFrom(const RecvReadyPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecvReadyPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.RecvReadyPackage";
  }
  protected:
  explicit RecvReadyPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kIsSharedFileFieldNumber = 3,
  };
  // string fileName = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // uint64 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool isSharedFile = 3;
  void clear_issharedfile();
  bool issharedfile() const;
  void set_issharedfile(bool value);
  private:
  bool _internal_issharedfile() const;
  void _internal_set_issharedfile(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dm.RecvReadyPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  bool issharedfile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class SharedFileInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.SharedFileInfo) */ {
 public:
  inline SharedFileInfo() : SharedFileInfo(nullptr) {}
  virtual ~SharedFileInfo();

  SharedFileInfo(const SharedFileInfo& from);
  SharedFileInfo(SharedFileInfo&& from) noexcept
    : SharedFileInfo() {
    *this = ::std::move(from);
  }

  inline SharedFileInfo& operator=(const SharedFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharedFileInfo& operator=(SharedFileInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SharedFileInfo& default_instance();

  static inline const SharedFileInfo* internal_default_instance() {
    return reinterpret_cast<const SharedFileInfo*>(
               &_SharedFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SharedFileInfo& a, SharedFileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SharedFileInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharedFileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SharedFileInfo* New() const final {
    return CreateMaybeMessage<SharedFileInfo>(nullptr);
  }

  SharedFileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SharedFileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SharedFileInfo& from);
  void MergeFrom(const SharedFileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SharedFileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.SharedFileInfo";
  }
  protected:
  explicit SharedFileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kShareTimeStampFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // string fileName = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // uint64 shareTimeStamp = 2;
  void clear_sharetimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 sharetimestamp() const;
  void set_sharetimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sharetimestamp() const;
  void _internal_set_sharetimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:dm.SharedFileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sharetimestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class SharedFileListPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.SharedFileListPackage) */ {
 public:
  inline SharedFileListPackage() : SharedFileListPackage(nullptr) {}
  virtual ~SharedFileListPackage();

  SharedFileListPackage(const SharedFileListPackage& from);
  SharedFileListPackage(SharedFileListPackage&& from) noexcept
    : SharedFileListPackage() {
    *this = ::std::move(from);
  }

  inline SharedFileListPackage& operator=(const SharedFileListPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharedFileListPackage& operator=(SharedFileListPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SharedFileListPackage& default_instance();

  static inline const SharedFileListPackage* internal_default_instance() {
    return reinterpret_cast<const SharedFileListPackage*>(
               &_SharedFileListPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SharedFileListPackage& a, SharedFileListPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(SharedFileListPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharedFileListPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SharedFileListPackage* New() const final {
    return CreateMaybeMessage<SharedFileListPackage>(nullptr);
  }

  SharedFileListPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SharedFileListPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SharedFileListPackage& from);
  void MergeFrom(const SharedFileListPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SharedFileListPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.SharedFileListPackage";
  }
  protected:
  explicit SharedFileListPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSharedFileFieldNumber = 1,
  };
  // repeated .dm.SharedFileInfo sharedFile = 1;
  int sharedfile_size() const;
  private:
  int _internal_sharedfile_size() const;
  public:
  void clear_sharedfile();
  ::dm::SharedFileInfo* mutable_sharedfile(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dm::SharedFileInfo >*
      mutable_sharedfile();
  private:
  const ::dm::SharedFileInfo& _internal_sharedfile(int index) const;
  ::dm::SharedFileInfo* _internal_add_sharedfile();
  public:
  const ::dm::SharedFileInfo& sharedfile(int index) const;
  ::dm::SharedFileInfo* add_sharedfile();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dm::SharedFileInfo >&
      sharedfile() const;

  // @@protoc_insertion_point(class_scope:dm.SharedFileListPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dm::SharedFileInfo > sharedfile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class RequestSharedFileListPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.RequestSharedFileListPackage) */ {
 public:
  inline RequestSharedFileListPackage() : RequestSharedFileListPackage(nullptr) {}
  virtual ~RequestSharedFileListPackage();

  RequestSharedFileListPackage(const RequestSharedFileListPackage& from);
  RequestSharedFileListPackage(RequestSharedFileListPackage&& from) noexcept
    : RequestSharedFileListPackage() {
    *this = ::std::move(from);
  }

  inline RequestSharedFileListPackage& operator=(const RequestSharedFileListPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestSharedFileListPackage& operator=(RequestSharedFileListPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestSharedFileListPackage& default_instance();

  static inline const RequestSharedFileListPackage* internal_default_instance() {
    return reinterpret_cast<const RequestSharedFileListPackage*>(
               &_RequestSharedFileListPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RequestSharedFileListPackage& a, RequestSharedFileListPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestSharedFileListPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestSharedFileListPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestSharedFileListPackage* New() const final {
    return CreateMaybeMessage<RequestSharedFileListPackage>(nullptr);
  }

  RequestSharedFileListPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestSharedFileListPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestSharedFileListPackage& from);
  void MergeFrom(const RequestSharedFileListPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestSharedFileListPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.RequestSharedFileListPackage";
  }
  protected:
  explicit RequestSharedFileListPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
  };
  // string reserved = 1;
  void clear_reserved();
  const std::string& reserved() const;
  void set_reserved(const std::string& value);
  void set_reserved(std::string&& value);
  void set_reserved(const char* value);
  void set_reserved(const char* value, size_t size);
  std::string* mutable_reserved();
  std::string* release_reserved();
  void set_allocated_reserved(std::string* reserved);
  private:
  const std::string& _internal_reserved() const;
  void _internal_set_reserved(const std::string& value);
  std::string* _internal_mutable_reserved();
  public:

  // @@protoc_insertion_point(class_scope:dm.RequestSharedFileListPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserved_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class UpgradeStagePackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.UpgradeStagePackage) */ {
 public:
  inline UpgradeStagePackage() : UpgradeStagePackage(nullptr) {}
  virtual ~UpgradeStagePackage();

  UpgradeStagePackage(const UpgradeStagePackage& from);
  UpgradeStagePackage(UpgradeStagePackage&& from) noexcept
    : UpgradeStagePackage() {
    *this = ::std::move(from);
  }

  inline UpgradeStagePackage& operator=(const UpgradeStagePackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpgradeStagePackage& operator=(UpgradeStagePackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpgradeStagePackage& default_instance();

  static inline const UpgradeStagePackage* internal_default_instance() {
    return reinterpret_cast<const UpgradeStagePackage*>(
               &_UpgradeStagePackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UpgradeStagePackage& a, UpgradeStagePackage& b) {
    a.Swap(&b);
  }
  inline void Swap(UpgradeStagePackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpgradeStagePackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpgradeStagePackage* New() const final {
    return CreateMaybeMessage<UpgradeStagePackage>(nullptr);
  }

  UpgradeStagePackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpgradeStagePackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpgradeStagePackage& from);
  void MergeFrom(const UpgradeStagePackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpgradeStagePackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.UpgradeStagePackage";
  }
  protected:
  explicit UpgradeStagePackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 1,
  };
  // int32 stage = 1;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dm.UpgradeStagePackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// -------------------------------------------------------------------

class ConnectResponsePackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dm.ConnectResponsePackage) */ {
 public:
  inline ConnectResponsePackage() : ConnectResponsePackage(nullptr) {}
  virtual ~ConnectResponsePackage();

  ConnectResponsePackage(const ConnectResponsePackage& from);
  ConnectResponsePackage(ConnectResponsePackage&& from) noexcept
    : ConnectResponsePackage() {
    *this = ::std::move(from);
  }

  inline ConnectResponsePackage& operator=(const ConnectResponsePackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectResponsePackage& operator=(ConnectResponsePackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectResponsePackage& default_instance();

  static inline const ConnectResponsePackage* internal_default_instance() {
    return reinterpret_cast<const ConnectResponsePackage*>(
               &_ConnectResponsePackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ConnectResponsePackage& a, ConnectResponsePackage& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectResponsePackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectResponsePackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectResponsePackage* New() const final {
    return CreateMaybeMessage<ConnectResponsePackage>(nullptr);
  }

  ConnectResponsePackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectResponsePackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectResponsePackage& from);
  void MergeFrom(const ConnectResponsePackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectResponsePackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dm.ConnectResponsePackage";
  }
  protected:
  explicit ConnectResponsePackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicemanagement_2eproto);
    return ::descriptor_table_devicemanagement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
    kServerIpFieldNumber = 2,
  };
  // string sn = 1;
  void clear_sn();
  const std::string& sn() const;
  void set_sn(const std::string& value);
  void set_sn(std::string&& value);
  void set_sn(const char* value);
  void set_sn(const char* value, size_t size);
  std::string* mutable_sn();
  std::string* release_sn();
  void set_allocated_sn(std::string* sn);
  private:
  const std::string& _internal_sn() const;
  void _internal_set_sn(const std::string& value);
  std::string* _internal_mutable_sn();
  public:

  // string serverIp = 2;
  void clear_serverip();
  const std::string& serverip() const;
  void set_serverip(const std::string& value);
  void set_serverip(std::string&& value);
  void set_serverip(const char* value);
  void set_serverip(const char* value, size_t size);
  std::string* mutable_serverip();
  std::string* release_serverip();
  void set_allocated_serverip(std::string* serverip);
  private:
  const std::string& _internal_serverip() const;
  void _internal_set_serverip(const std::string& value);
  std::string* _internal_mutable_serverip();
  public:

  // @@protoc_insertion_point(class_scope:dm.ConnectResponsePackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devicemanagement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransMsg

// .dm.TransMsg.PACKAGETYPE packageType = 1;
inline void TransMsg::clear_packagetype() {
  packagetype_ = 0;
}
inline ::dm::TransMsg_PACKAGETYPE TransMsg::_internal_packagetype() const {
  return static_cast< ::dm::TransMsg_PACKAGETYPE >(packagetype_);
}
inline ::dm::TransMsg_PACKAGETYPE TransMsg::packagetype() const {
  // @@protoc_insertion_point(field_get:dm.TransMsg.packageType)
  return _internal_packagetype();
}
inline void TransMsg::_internal_set_packagetype(::dm::TransMsg_PACKAGETYPE value) {
  
  packagetype_ = value;
}
inline void TransMsg::set_packagetype(::dm::TransMsg_PACKAGETYPE value) {
  _internal_set_packagetype(value);
  // @@protoc_insertion_point(field_set:dm.TransMsg.packageType)
}

// bytes packageContent = 2;
inline void TransMsg::clear_packagecontent() {
  packagecontent_.ClearToEmpty();
}
inline const std::string& TransMsg::packagecontent() const {
  // @@protoc_insertion_point(field_get:dm.TransMsg.packageContent)
  return _internal_packagecontent();
}
inline void TransMsg::set_packagecontent(const std::string& value) {
  _internal_set_packagecontent(value);
  // @@protoc_insertion_point(field_set:dm.TransMsg.packageContent)
}
inline std::string* TransMsg::mutable_packagecontent() {
  // @@protoc_insertion_point(field_mutable:dm.TransMsg.packageContent)
  return _internal_mutable_packagecontent();
}
inline const std::string& TransMsg::_internal_packagecontent() const {
  return packagecontent_.Get();
}
inline void TransMsg::_internal_set_packagecontent(const std::string& value) {
  
  packagecontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransMsg::set_packagecontent(std::string&& value) {
  
  packagecontent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.TransMsg.packageContent)
}
inline void TransMsg::set_packagecontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packagecontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.TransMsg.packageContent)
}
inline void TransMsg::set_packagecontent(const void* value,
    size_t size) {
  
  packagecontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.TransMsg.packageContent)
}
inline std::string* TransMsg::_internal_mutable_packagecontent() {
  
  return packagecontent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransMsg::release_packagecontent() {
  // @@protoc_insertion_point(field_release:dm.TransMsg.packageContent)
  return packagecontent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransMsg::set_allocated_packagecontent(std::string* packagecontent) {
  if (packagecontent != nullptr) {
    
  } else {
    
  }
  packagecontent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packagecontent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.TransMsg.packageContent)
}

// -------------------------------------------------------------------

// CmdPackage

// .dm.CmdPackage.CMDTYPE cmd = 1;
inline void CmdPackage::clear_cmd() {
  cmd_ = 0;
}
inline ::dm::CmdPackage_CMDTYPE CmdPackage::_internal_cmd() const {
  return static_cast< ::dm::CmdPackage_CMDTYPE >(cmd_);
}
inline ::dm::CmdPackage_CMDTYPE CmdPackage::cmd() const {
  // @@protoc_insertion_point(field_get:dm.CmdPackage.cmd)
  return _internal_cmd();
}
inline void CmdPackage::_internal_set_cmd(::dm::CmdPackage_CMDTYPE value) {
  
  cmd_ = value;
}
inline void CmdPackage::set_cmd(::dm::CmdPackage_CMDTYPE value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:dm.CmdPackage.cmd)
}

// bool lock = 2;
inline bool CmdPackage::_internal_has_lock() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CmdPackage::has_lock() const {
  return _internal_has_lock();
}
inline void CmdPackage::clear_lock() {
  lock_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CmdPackage::_internal_lock() const {
  return lock_;
}
inline bool CmdPackage::lock() const {
  // @@protoc_insertion_point(field_get:dm.CmdPackage.lock)
  return _internal_lock();
}
inline void CmdPackage::_internal_set_lock(bool value) {
  _has_bits_[0] |= 0x00000004u;
  lock_ = value;
}
inline void CmdPackage::set_lock(bool value) {
  _internal_set_lock(value);
  // @@protoc_insertion_point(field_set:dm.CmdPackage.lock)
}

// string version = 3;
inline bool CmdPackage::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CmdPackage::has_version() const {
  return _internal_has_version();
}
inline void CmdPackage::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CmdPackage::version() const {
  // @@protoc_insertion_point(field_get:dm.CmdPackage.version)
  return _internal_version();
}
inline void CmdPackage::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:dm.CmdPackage.version)
}
inline std::string* CmdPackage::mutable_version() {
  // @@protoc_insertion_point(field_mutable:dm.CmdPackage.version)
  return _internal_mutable_version();
}
inline const std::string& CmdPackage::_internal_version() const {
  return version_.Get();
}
inline void CmdPackage::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CmdPackage::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.CmdPackage.version)
}
inline void CmdPackage::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.CmdPackage.version)
}
inline void CmdPackage::set_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.CmdPackage.version)
}
inline std::string* CmdPackage::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CmdPackage::release_version() {
  // @@protoc_insertion_point(field_release:dm.CmdPackage.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CmdPackage::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.CmdPackage.version)
}

// string imgName = 4;
inline bool CmdPackage::_internal_has_imgname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CmdPackage::has_imgname() const {
  return _internal_has_imgname();
}
inline void CmdPackage::clear_imgname() {
  imgname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CmdPackage::imgname() const {
  // @@protoc_insertion_point(field_get:dm.CmdPackage.imgName)
  return _internal_imgname();
}
inline void CmdPackage::set_imgname(const std::string& value) {
  _internal_set_imgname(value);
  // @@protoc_insertion_point(field_set:dm.CmdPackage.imgName)
}
inline std::string* CmdPackage::mutable_imgname() {
  // @@protoc_insertion_point(field_mutable:dm.CmdPackage.imgName)
  return _internal_mutable_imgname();
}
inline const std::string& CmdPackage::_internal_imgname() const {
  return imgname_.Get();
}
inline void CmdPackage::_internal_set_imgname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  imgname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CmdPackage::set_imgname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  imgname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.CmdPackage.imgName)
}
inline void CmdPackage::set_imgname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  imgname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.CmdPackage.imgName)
}
inline void CmdPackage::set_imgname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  imgname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.CmdPackage.imgName)
}
inline std::string* CmdPackage::_internal_mutable_imgname() {
  _has_bits_[0] |= 0x00000002u;
  return imgname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CmdPackage::release_imgname() {
  // @@protoc_insertion_point(field_release:dm.CmdPackage.imgName)
  if (!_internal_has_imgname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return imgname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CmdPackage::set_allocated_imgname(std::string* imgname) {
  if (imgname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  imgname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imgname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.CmdPackage.imgName)
}

// bool saveUserData = 5;
inline bool CmdPackage::_internal_has_saveuserdata() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CmdPackage::has_saveuserdata() const {
  return _internal_has_saveuserdata();
}
inline void CmdPackage::clear_saveuserdata() {
  saveuserdata_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CmdPackage::_internal_saveuserdata() const {
  return saveuserdata_;
}
inline bool CmdPackage::saveuserdata() const {
  // @@protoc_insertion_point(field_get:dm.CmdPackage.saveUserData)
  return _internal_saveuserdata();
}
inline void CmdPackage::_internal_set_saveuserdata(bool value) {
  _has_bits_[0] |= 0x00000008u;
  saveuserdata_ = value;
}
inline void CmdPackage::set_saveuserdata(bool value) {
  _internal_set_saveuserdata(value);
  // @@protoc_insertion_point(field_set:dm.CmdPackage.saveUserData)
}

// -------------------------------------------------------------------

// CmdPackageV2

// .dm.CmdPackageV2.CMDTYPE cmd = 1;
inline void CmdPackageV2::clear_cmd() {
  cmd_ = 0;
}
inline ::dm::CmdPackageV2_CMDTYPE CmdPackageV2::_internal_cmd() const {
  return static_cast< ::dm::CmdPackageV2_CMDTYPE >(cmd_);
}
inline ::dm::CmdPackageV2_CMDTYPE CmdPackageV2::cmd() const {
  // @@protoc_insertion_point(field_get:dm.CmdPackageV2.cmd)
  return _internal_cmd();
}
inline void CmdPackageV2::_internal_set_cmd(::dm::CmdPackageV2_CMDTYPE value) {
  
  cmd_ = value;
}
inline void CmdPackageV2::set_cmd(::dm::CmdPackageV2_CMDTYPE value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:dm.CmdPackageV2.cmd)
}

// bytes parameters = 2;
inline void CmdPackageV2::clear_parameters() {
  parameters_.ClearToEmpty();
}
inline const std::string& CmdPackageV2::parameters() const {
  // @@protoc_insertion_point(field_get:dm.CmdPackageV2.parameters)
  return _internal_parameters();
}
inline void CmdPackageV2::set_parameters(const std::string& value) {
  _internal_set_parameters(value);
  // @@protoc_insertion_point(field_set:dm.CmdPackageV2.parameters)
}
inline std::string* CmdPackageV2::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:dm.CmdPackageV2.parameters)
  return _internal_mutable_parameters();
}
inline const std::string& CmdPackageV2::_internal_parameters() const {
  return parameters_.Get();
}
inline void CmdPackageV2::_internal_set_parameters(const std::string& value) {
  
  parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CmdPackageV2::set_parameters(std::string&& value) {
  
  parameters_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.CmdPackageV2.parameters)
}
inline void CmdPackageV2::set_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.CmdPackageV2.parameters)
}
inline void CmdPackageV2::set_parameters(const void* value,
    size_t size) {
  
  parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.CmdPackageV2.parameters)
}
inline std::string* CmdPackageV2::_internal_mutable_parameters() {
  
  return parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CmdPackageV2::release_parameters() {
  // @@protoc_insertion_point(field_release:dm.CmdPackageV2.parameters)
  return parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CmdPackageV2::set_allocated_parameters(std::string* parameters) {
  if (parameters != nullptr) {
    
  } else {
    
  }
  parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameters,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.CmdPackageV2.parameters)
}

// -------------------------------------------------------------------

// BroadcastPackage

// string query = 1;
inline void BroadcastPackage::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& BroadcastPackage::query() const {
  // @@protoc_insertion_point(field_get:dm.BroadcastPackage.query)
  return _internal_query();
}
inline void BroadcastPackage::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:dm.BroadcastPackage.query)
}
inline std::string* BroadcastPackage::mutable_query() {
  // @@protoc_insertion_point(field_mutable:dm.BroadcastPackage.query)
  return _internal_mutable_query();
}
inline const std::string& BroadcastPackage::_internal_query() const {
  return query_.Get();
}
inline void BroadcastPackage::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BroadcastPackage::set_query(std::string&& value) {
  
  query_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.BroadcastPackage.query)
}
inline void BroadcastPackage::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.BroadcastPackage.query)
}
inline void BroadcastPackage::set_query(const char* value,
    size_t size) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.BroadcastPackage.query)
}
inline std::string* BroadcastPackage::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BroadcastPackage::release_query() {
  // @@protoc_insertion_point(field_release:dm.BroadcastPackage.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BroadcastPackage::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.BroadcastPackage.query)
}

// -------------------------------------------------------------------

// ConnectPackage

// bool connect = 1;
inline void ConnectPackage::clear_connect() {
  connect_ = false;
}
inline bool ConnectPackage::_internal_connect() const {
  return connect_;
}
inline bool ConnectPackage::connect() const {
  // @@protoc_insertion_point(field_get:dm.ConnectPackage.connect)
  return _internal_connect();
}
inline void ConnectPackage::_internal_set_connect(bool value) {
  
  connect_ = value;
}
inline void ConnectPackage::set_connect(bool value) {
  _internal_set_connect(value);
  // @@protoc_insertion_point(field_set:dm.ConnectPackage.connect)
}

// -------------------------------------------------------------------

// ResponsePackage

// int32 code = 1;
inline void ResponsePackage::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePackage::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePackage::code() const {
  // @@protoc_insertion_point(field_get:dm.ResponsePackage.code)
  return _internal_code();
}
inline void ResponsePackage::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void ResponsePackage::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:dm.ResponsePackage.code)
}

// string message = 2;
inline void ResponsePackage::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ResponsePackage::message() const {
  // @@protoc_insertion_point(field_get:dm.ResponsePackage.message)
  return _internal_message();
}
inline void ResponsePackage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:dm.ResponsePackage.message)
}
inline std::string* ResponsePackage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:dm.ResponsePackage.message)
  return _internal_mutable_message();
}
inline const std::string& ResponsePackage::_internal_message() const {
  return message_.Get();
}
inline void ResponsePackage::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResponsePackage::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.ResponsePackage.message)
}
inline void ResponsePackage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.ResponsePackage.message)
}
inline void ResponsePackage::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.ResponsePackage.message)
}
inline std::string* ResponsePackage::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResponsePackage::release_message() {
  // @@protoc_insertion_point(field_release:dm.ResponsePackage.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponsePackage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.ResponsePackage.message)
}

// -------------------------------------------------------------------

// StatePackage

// int32 power = 1;
inline void StatePackage::clear_power() {
  power_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatePackage::_internal_power() const {
  return power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatePackage::power() const {
  // @@protoc_insertion_point(field_get:dm.StatePackage.power)
  return _internal_power();
}
inline void StatePackage::_internal_set_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  power_ = value;
}
inline void StatePackage::set_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:dm.StatePackage.power)
}

// bool charging = 2;
inline void StatePackage::clear_charging() {
  charging_ = false;
}
inline bool StatePackage::_internal_charging() const {
  return charging_;
}
inline bool StatePackage::charging() const {
  // @@protoc_insertion_point(field_get:dm.StatePackage.charging)
  return _internal_charging();
}
inline void StatePackage::_internal_set_charging(bool value) {
  
  charging_ = value;
}
inline void StatePackage::set_charging(bool value) {
  _internal_set_charging(value);
  // @@protoc_insertion_point(field_set:dm.StatePackage.charging)
}

// string sn = 3;
inline void StatePackage::clear_sn() {
  sn_.ClearToEmpty();
}
inline const std::string& StatePackage::sn() const {
  // @@protoc_insertion_point(field_get:dm.StatePackage.sn)
  return _internal_sn();
}
inline void StatePackage::set_sn(const std::string& value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:dm.StatePackage.sn)
}
inline std::string* StatePackage::mutable_sn() {
  // @@protoc_insertion_point(field_mutable:dm.StatePackage.sn)
  return _internal_mutable_sn();
}
inline const std::string& StatePackage::_internal_sn() const {
  return sn_.Get();
}
inline void StatePackage::_internal_set_sn(const std::string& value) {
  
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StatePackage::set_sn(std::string&& value) {
  
  sn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.StatePackage.sn)
}
inline void StatePackage::set_sn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.StatePackage.sn)
}
inline void StatePackage::set_sn(const char* value,
    size_t size) {
  
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.StatePackage.sn)
}
inline std::string* StatePackage::_internal_mutable_sn() {
  
  return sn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StatePackage::release_sn() {
  // @@protoc_insertion_point(field_release:dm.StatePackage.sn)
  return sn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatePackage::set_allocated_sn(std::string* sn) {
  if (sn != nullptr) {
    
  } else {
    
  }
  sn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.StatePackage.sn)
}

// bool lock = 4;
inline void StatePackage::clear_lock() {
  lock_ = false;
}
inline bool StatePackage::_internal_lock() const {
  return lock_;
}
inline bool StatePackage::lock() const {
  // @@protoc_insertion_point(field_get:dm.StatePackage.lock)
  return _internal_lock();
}
inline void StatePackage::_internal_set_lock(bool value) {
  
  lock_ = value;
}
inline void StatePackage::set_lock(bool value) {
  _internal_set_lock(value);
  // @@protoc_insertion_point(field_set:dm.StatePackage.lock)
}

// string version = 5;
inline void StatePackage::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& StatePackage::version() const {
  // @@protoc_insertion_point(field_get:dm.StatePackage.version)
  return _internal_version();
}
inline void StatePackage::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:dm.StatePackage.version)
}
inline std::string* StatePackage::mutable_version() {
  // @@protoc_insertion_point(field_mutable:dm.StatePackage.version)
  return _internal_mutable_version();
}
inline const std::string& StatePackage::_internal_version() const {
  return version_.Get();
}
inline void StatePackage::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StatePackage::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.StatePackage.version)
}
inline void StatePackage::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.StatePackage.version)
}
inline void StatePackage::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.StatePackage.version)
}
inline std::string* StatePackage::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StatePackage::release_version() {
  // @@protoc_insertion_point(field_release:dm.StatePackage.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatePackage::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.StatePackage.version)
}

// int32 state = 6;
inline void StatePackage::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatePackage::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatePackage::state() const {
  // @@protoc_insertion_point(field_get:dm.StatePackage.state)
  return _internal_state();
}
inline void StatePackage::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void StatePackage::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:dm.StatePackage.state)
}

// -------------------------------------------------------------------

// StatusPackage

// int32 power = 1;
inline void StatusPackage::clear_power() {
  power_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusPackage::_internal_power() const {
  return power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusPackage::power() const {
  // @@protoc_insertion_point(field_get:dm.StatusPackage.power)
  return _internal_power();
}
inline void StatusPackage::_internal_set_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  power_ = value;
}
inline void StatusPackage::set_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:dm.StatusPackage.power)
}

// bool charging = 2;
inline void StatusPackage::clear_charging() {
  charging_ = false;
}
inline bool StatusPackage::_internal_charging() const {
  return charging_;
}
inline bool StatusPackage::charging() const {
  // @@protoc_insertion_point(field_get:dm.StatusPackage.charging)
  return _internal_charging();
}
inline void StatusPackage::_internal_set_charging(bool value) {
  
  charging_ = value;
}
inline void StatusPackage::set_charging(bool value) {
  _internal_set_charging(value);
  // @@protoc_insertion_point(field_set:dm.StatusPackage.charging)
}

// string sn = 3;
inline void StatusPackage::clear_sn() {
  sn_.ClearToEmpty();
}
inline const std::string& StatusPackage::sn() const {
  // @@protoc_insertion_point(field_get:dm.StatusPackage.sn)
  return _internal_sn();
}
inline void StatusPackage::set_sn(const std::string& value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:dm.StatusPackage.sn)
}
inline std::string* StatusPackage::mutable_sn() {
  // @@protoc_insertion_point(field_mutable:dm.StatusPackage.sn)
  return _internal_mutable_sn();
}
inline const std::string& StatusPackage::_internal_sn() const {
  return sn_.Get();
}
inline void StatusPackage::_internal_set_sn(const std::string& value) {
  
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StatusPackage::set_sn(std::string&& value) {
  
  sn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.StatusPackage.sn)
}
inline void StatusPackage::set_sn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.StatusPackage.sn)
}
inline void StatusPackage::set_sn(const char* value,
    size_t size) {
  
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.StatusPackage.sn)
}
inline std::string* StatusPackage::_internal_mutable_sn() {
  
  return sn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StatusPackage::release_sn() {
  // @@protoc_insertion_point(field_release:dm.StatusPackage.sn)
  return sn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusPackage::set_allocated_sn(std::string* sn) {
  if (sn != nullptr) {
    
  } else {
    
  }
  sn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.StatusPackage.sn)
}

// bool lock = 4;
inline void StatusPackage::clear_lock() {
  lock_ = false;
}
inline bool StatusPackage::_internal_lock() const {
  return lock_;
}
inline bool StatusPackage::lock() const {
  // @@protoc_insertion_point(field_get:dm.StatusPackage.lock)
  return _internal_lock();
}
inline void StatusPackage::_internal_set_lock(bool value) {
  
  lock_ = value;
}
inline void StatusPackage::set_lock(bool value) {
  _internal_set_lock(value);
  // @@protoc_insertion_point(field_set:dm.StatusPackage.lock)
}

// string version = 5;
inline void StatusPackage::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& StatusPackage::version() const {
  // @@protoc_insertion_point(field_get:dm.StatusPackage.version)
  return _internal_version();
}
inline void StatusPackage::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:dm.StatusPackage.version)
}
inline std::string* StatusPackage::mutable_version() {
  // @@protoc_insertion_point(field_mutable:dm.StatusPackage.version)
  return _internal_mutable_version();
}
inline const std::string& StatusPackage::_internal_version() const {
  return version_.Get();
}
inline void StatusPackage::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StatusPackage::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.StatusPackage.version)
}
inline void StatusPackage::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.StatusPackage.version)
}
inline void StatusPackage::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.StatusPackage.version)
}
inline std::string* StatusPackage::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StatusPackage::release_version() {
  // @@protoc_insertion_point(field_release:dm.StatusPackage.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusPackage::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.StatusPackage.version)
}

// int32 state = 6;
inline void StatusPackage::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusPackage::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusPackage::state() const {
  // @@protoc_insertion_point(field_get:dm.StatusPackage.state)
  return _internal_state();
}
inline void StatusPackage::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void StatusPackage::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:dm.StatusPackage.state)
}

// int32 deviceType = 7;
inline void StatusPackage::clear_devicetype() {
  devicetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusPackage::_internal_devicetype() const {
  return devicetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusPackage::devicetype() const {
  // @@protoc_insertion_point(field_get:dm.StatusPackage.deviceType)
  return _internal_devicetype();
}
inline void StatusPackage::_internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  devicetype_ = value;
}
inline void StatusPackage::set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:dm.StatusPackage.deviceType)
}

// -------------------------------------------------------------------

// PercentPackage

// int32 percentage = 1;
inline void PercentPackage::clear_percentage() {
  percentage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PercentPackage::_internal_percentage() const {
  return percentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PercentPackage::percentage() const {
  // @@protoc_insertion_point(field_get:dm.PercentPackage.percentage)
  return _internal_percentage();
}
inline void PercentPackage::_internal_set_percentage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  percentage_ = value;
}
inline void PercentPackage::set_percentage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:dm.PercentPackage.percentage)
}

// -------------------------------------------------------------------

// FileRequestPackage

// string fileName = 1;
inline void FileRequestPackage::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& FileRequestPackage::filename() const {
  // @@protoc_insertion_point(field_get:dm.FileRequestPackage.fileName)
  return _internal_filename();
}
inline void FileRequestPackage::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:dm.FileRequestPackage.fileName)
}
inline std::string* FileRequestPackage::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:dm.FileRequestPackage.fileName)
  return _internal_mutable_filename();
}
inline const std::string& FileRequestPackage::_internal_filename() const {
  return filename_.Get();
}
inline void FileRequestPackage::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileRequestPackage::set_filename(std::string&& value) {
  
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.FileRequestPackage.fileName)
}
inline void FileRequestPackage::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.FileRequestPackage.fileName)
}
inline void FileRequestPackage::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.FileRequestPackage.fileName)
}
inline std::string* FileRequestPackage::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileRequestPackage::release_filename() {
  // @@protoc_insertion_point(field_release:dm.FileRequestPackage.fileName)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileRequestPackage::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.FileRequestPackage.fileName)
}

// bool isSharedFile = 2;
inline void FileRequestPackage::clear_issharedfile() {
  issharedfile_ = false;
}
inline bool FileRequestPackage::_internal_issharedfile() const {
  return issharedfile_;
}
inline bool FileRequestPackage::issharedfile() const {
  // @@protoc_insertion_point(field_get:dm.FileRequestPackage.isSharedFile)
  return _internal_issharedfile();
}
inline void FileRequestPackage::_internal_set_issharedfile(bool value) {
  
  issharedfile_ = value;
}
inline void FileRequestPackage::set_issharedfile(bool value) {
  _internal_set_issharedfile(value);
  // @@protoc_insertion_point(field_set:dm.FileRequestPackage.isSharedFile)
}

// -------------------------------------------------------------------

// FileInfoPackage

// string fileName = 1;
inline void FileInfoPackage::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& FileInfoPackage::filename() const {
  // @@protoc_insertion_point(field_get:dm.FileInfoPackage.fileName)
  return _internal_filename();
}
inline void FileInfoPackage::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:dm.FileInfoPackage.fileName)
}
inline std::string* FileInfoPackage::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:dm.FileInfoPackage.fileName)
  return _internal_mutable_filename();
}
inline const std::string& FileInfoPackage::_internal_filename() const {
  return filename_.Get();
}
inline void FileInfoPackage::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileInfoPackage::set_filename(std::string&& value) {
  
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.FileInfoPackage.fileName)
}
inline void FileInfoPackage::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.FileInfoPackage.fileName)
}
inline void FileInfoPackage::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.FileInfoPackage.fileName)
}
inline std::string* FileInfoPackage::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileInfoPackage::release_filename() {
  // @@protoc_insertion_point(field_release:dm.FileInfoPackage.fileName)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileInfoPackage::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.FileInfoPackage.fileName)
}

// string md5 = 2;
inline void FileInfoPackage::clear_md5() {
  md5_.ClearToEmpty();
}
inline const std::string& FileInfoPackage::md5() const {
  // @@protoc_insertion_point(field_get:dm.FileInfoPackage.md5)
  return _internal_md5();
}
inline void FileInfoPackage::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:dm.FileInfoPackage.md5)
}
inline std::string* FileInfoPackage::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:dm.FileInfoPackage.md5)
  return _internal_mutable_md5();
}
inline const std::string& FileInfoPackage::_internal_md5() const {
  return md5_.Get();
}
inline void FileInfoPackage::_internal_set_md5(const std::string& value) {
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileInfoPackage::set_md5(std::string&& value) {
  
  md5_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.FileInfoPackage.md5)
}
inline void FileInfoPackage::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.FileInfoPackage.md5)
}
inline void FileInfoPackage::set_md5(const char* value,
    size_t size) {
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.FileInfoPackage.md5)
}
inline std::string* FileInfoPackage::_internal_mutable_md5() {
  
  return md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileInfoPackage::release_md5() {
  // @@protoc_insertion_point(field_release:dm.FileInfoPackage.md5)
  return md5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileInfoPackage::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.FileInfoPackage.md5)
}

// uint64 size = 3;
inline void FileInfoPackage::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileInfoPackage::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileInfoPackage::size() const {
  // @@protoc_insertion_point(field_get:dm.FileInfoPackage.size)
  return _internal_size();
}
inline void FileInfoPackage::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void FileInfoPackage::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:dm.FileInfoPackage.size)
}

// bytes other = 4;
inline void FileInfoPackage::clear_other() {
  other_.ClearToEmpty();
}
inline const std::string& FileInfoPackage::other() const {
  // @@protoc_insertion_point(field_get:dm.FileInfoPackage.other)
  return _internal_other();
}
inline void FileInfoPackage::set_other(const std::string& value) {
  _internal_set_other(value);
  // @@protoc_insertion_point(field_set:dm.FileInfoPackage.other)
}
inline std::string* FileInfoPackage::mutable_other() {
  // @@protoc_insertion_point(field_mutable:dm.FileInfoPackage.other)
  return _internal_mutable_other();
}
inline const std::string& FileInfoPackage::_internal_other() const {
  return other_.Get();
}
inline void FileInfoPackage::_internal_set_other(const std::string& value) {
  
  other_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileInfoPackage::set_other(std::string&& value) {
  
  other_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.FileInfoPackage.other)
}
inline void FileInfoPackage::set_other(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  other_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.FileInfoPackage.other)
}
inline void FileInfoPackage::set_other(const void* value,
    size_t size) {
  
  other_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.FileInfoPackage.other)
}
inline std::string* FileInfoPackage::_internal_mutable_other() {
  
  return other_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileInfoPackage::release_other() {
  // @@protoc_insertion_point(field_release:dm.FileInfoPackage.other)
  return other_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileInfoPackage::set_allocated_other(std::string* other) {
  if (other != nullptr) {
    
  } else {
    
  }
  other_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), other,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.FileInfoPackage.other)
}

// bool isSharedFile = 5;
inline void FileInfoPackage::clear_issharedfile() {
  issharedfile_ = false;
}
inline bool FileInfoPackage::_internal_issharedfile() const {
  return issharedfile_;
}
inline bool FileInfoPackage::issharedfile() const {
  // @@protoc_insertion_point(field_get:dm.FileInfoPackage.isSharedFile)
  return _internal_issharedfile();
}
inline void FileInfoPackage::_internal_set_issharedfile(bool value) {
  
  issharedfile_ = value;
}
inline void FileInfoPackage::set_issharedfile(bool value) {
  _internal_set_issharedfile(value);
  // @@protoc_insertion_point(field_set:dm.FileInfoPackage.isSharedFile)
}

// -------------------------------------------------------------------

// RecvReadyPackage

// string fileName = 1;
inline void RecvReadyPackage::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& RecvReadyPackage::filename() const {
  // @@protoc_insertion_point(field_get:dm.RecvReadyPackage.fileName)
  return _internal_filename();
}
inline void RecvReadyPackage::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:dm.RecvReadyPackage.fileName)
}
inline std::string* RecvReadyPackage::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:dm.RecvReadyPackage.fileName)
  return _internal_mutable_filename();
}
inline const std::string& RecvReadyPackage::_internal_filename() const {
  return filename_.Get();
}
inline void RecvReadyPackage::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecvReadyPackage::set_filename(std::string&& value) {
  
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.RecvReadyPackage.fileName)
}
inline void RecvReadyPackage::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.RecvReadyPackage.fileName)
}
inline void RecvReadyPackage::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.RecvReadyPackage.fileName)
}
inline std::string* RecvReadyPackage::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecvReadyPackage::release_filename() {
  // @@protoc_insertion_point(field_release:dm.RecvReadyPackage.fileName)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecvReadyPackage::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.RecvReadyPackage.fileName)
}

// uint64 offset = 2;
inline void RecvReadyPackage::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RecvReadyPackage::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RecvReadyPackage::offset() const {
  // @@protoc_insertion_point(field_get:dm.RecvReadyPackage.offset)
  return _internal_offset();
}
inline void RecvReadyPackage::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void RecvReadyPackage::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:dm.RecvReadyPackage.offset)
}

// bool isSharedFile = 3;
inline void RecvReadyPackage::clear_issharedfile() {
  issharedfile_ = false;
}
inline bool RecvReadyPackage::_internal_issharedfile() const {
  return issharedfile_;
}
inline bool RecvReadyPackage::issharedfile() const {
  // @@protoc_insertion_point(field_get:dm.RecvReadyPackage.isSharedFile)
  return _internal_issharedfile();
}
inline void RecvReadyPackage::_internal_set_issharedfile(bool value) {
  
  issharedfile_ = value;
}
inline void RecvReadyPackage::set_issharedfile(bool value) {
  _internal_set_issharedfile(value);
  // @@protoc_insertion_point(field_set:dm.RecvReadyPackage.isSharedFile)
}

// -------------------------------------------------------------------

// SharedFileInfo

// string fileName = 1;
inline void SharedFileInfo::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& SharedFileInfo::filename() const {
  // @@protoc_insertion_point(field_get:dm.SharedFileInfo.fileName)
  return _internal_filename();
}
inline void SharedFileInfo::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:dm.SharedFileInfo.fileName)
}
inline std::string* SharedFileInfo::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:dm.SharedFileInfo.fileName)
  return _internal_mutable_filename();
}
inline const std::string& SharedFileInfo::_internal_filename() const {
  return filename_.Get();
}
inline void SharedFileInfo::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SharedFileInfo::set_filename(std::string&& value) {
  
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.SharedFileInfo.fileName)
}
inline void SharedFileInfo::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.SharedFileInfo.fileName)
}
inline void SharedFileInfo::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.SharedFileInfo.fileName)
}
inline std::string* SharedFileInfo::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SharedFileInfo::release_filename() {
  // @@protoc_insertion_point(field_release:dm.SharedFileInfo.fileName)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SharedFileInfo::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.SharedFileInfo.fileName)
}

// uint64 shareTimeStamp = 2;
inline void SharedFileInfo::clear_sharetimestamp() {
  sharetimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SharedFileInfo::_internal_sharetimestamp() const {
  return sharetimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SharedFileInfo::sharetimestamp() const {
  // @@protoc_insertion_point(field_get:dm.SharedFileInfo.shareTimeStamp)
  return _internal_sharetimestamp();
}
inline void SharedFileInfo::_internal_set_sharetimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sharetimestamp_ = value;
}
inline void SharedFileInfo::set_sharetimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sharetimestamp(value);
  // @@protoc_insertion_point(field_set:dm.SharedFileInfo.shareTimeStamp)
}

// uint64 size = 3;
inline void SharedFileInfo::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SharedFileInfo::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SharedFileInfo::size() const {
  // @@protoc_insertion_point(field_get:dm.SharedFileInfo.size)
  return _internal_size();
}
inline void SharedFileInfo::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void SharedFileInfo::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:dm.SharedFileInfo.size)
}

// -------------------------------------------------------------------

// SharedFileListPackage

// repeated .dm.SharedFileInfo sharedFile = 1;
inline int SharedFileListPackage::_internal_sharedfile_size() const {
  return sharedfile_.size();
}
inline int SharedFileListPackage::sharedfile_size() const {
  return _internal_sharedfile_size();
}
inline void SharedFileListPackage::clear_sharedfile() {
  sharedfile_.Clear();
}
inline ::dm::SharedFileInfo* SharedFileListPackage::mutable_sharedfile(int index) {
  // @@protoc_insertion_point(field_mutable:dm.SharedFileListPackage.sharedFile)
  return sharedfile_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dm::SharedFileInfo >*
SharedFileListPackage::mutable_sharedfile() {
  // @@protoc_insertion_point(field_mutable_list:dm.SharedFileListPackage.sharedFile)
  return &sharedfile_;
}
inline const ::dm::SharedFileInfo& SharedFileListPackage::_internal_sharedfile(int index) const {
  return sharedfile_.Get(index);
}
inline const ::dm::SharedFileInfo& SharedFileListPackage::sharedfile(int index) const {
  // @@protoc_insertion_point(field_get:dm.SharedFileListPackage.sharedFile)
  return _internal_sharedfile(index);
}
inline ::dm::SharedFileInfo* SharedFileListPackage::_internal_add_sharedfile() {
  return sharedfile_.Add();
}
inline ::dm::SharedFileInfo* SharedFileListPackage::add_sharedfile() {
  // @@protoc_insertion_point(field_add:dm.SharedFileListPackage.sharedFile)
  return _internal_add_sharedfile();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dm::SharedFileInfo >&
SharedFileListPackage::sharedfile() const {
  // @@protoc_insertion_point(field_list:dm.SharedFileListPackage.sharedFile)
  return sharedfile_;
}

// -------------------------------------------------------------------

// RequestSharedFileListPackage

// string reserved = 1;
inline void RequestSharedFileListPackage::clear_reserved() {
  reserved_.ClearToEmpty();
}
inline const std::string& RequestSharedFileListPackage::reserved() const {
  // @@protoc_insertion_point(field_get:dm.RequestSharedFileListPackage.reserved)
  return _internal_reserved();
}
inline void RequestSharedFileListPackage::set_reserved(const std::string& value) {
  _internal_set_reserved(value);
  // @@protoc_insertion_point(field_set:dm.RequestSharedFileListPackage.reserved)
}
inline std::string* RequestSharedFileListPackage::mutable_reserved() {
  // @@protoc_insertion_point(field_mutable:dm.RequestSharedFileListPackage.reserved)
  return _internal_mutable_reserved();
}
inline const std::string& RequestSharedFileListPackage::_internal_reserved() const {
  return reserved_.Get();
}
inline void RequestSharedFileListPackage::_internal_set_reserved(const std::string& value) {
  
  reserved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestSharedFileListPackage::set_reserved(std::string&& value) {
  
  reserved_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.RequestSharedFileListPackage.reserved)
}
inline void RequestSharedFileListPackage::set_reserved(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reserved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.RequestSharedFileListPackage.reserved)
}
inline void RequestSharedFileListPackage::set_reserved(const char* value,
    size_t size) {
  
  reserved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.RequestSharedFileListPackage.reserved)
}
inline std::string* RequestSharedFileListPackage::_internal_mutable_reserved() {
  
  return reserved_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestSharedFileListPackage::release_reserved() {
  // @@protoc_insertion_point(field_release:dm.RequestSharedFileListPackage.reserved)
  return reserved_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestSharedFileListPackage::set_allocated_reserved(std::string* reserved) {
  if (reserved != nullptr) {
    
  } else {
    
  }
  reserved_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserved,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.RequestSharedFileListPackage.reserved)
}

// -------------------------------------------------------------------

// UpgradeStagePackage

// int32 stage = 1;
inline void UpgradeStagePackage::clear_stage() {
  stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpgradeStagePackage::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpgradeStagePackage::stage() const {
  // @@protoc_insertion_point(field_get:dm.UpgradeStagePackage.stage)
  return _internal_stage();
}
inline void UpgradeStagePackage::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_ = value;
}
inline void UpgradeStagePackage::set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:dm.UpgradeStagePackage.stage)
}

// -------------------------------------------------------------------

// ConnectResponsePackage

// string sn = 1;
inline void ConnectResponsePackage::clear_sn() {
  sn_.ClearToEmpty();
}
inline const std::string& ConnectResponsePackage::sn() const {
  // @@protoc_insertion_point(field_get:dm.ConnectResponsePackage.sn)
  return _internal_sn();
}
inline void ConnectResponsePackage::set_sn(const std::string& value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:dm.ConnectResponsePackage.sn)
}
inline std::string* ConnectResponsePackage::mutable_sn() {
  // @@protoc_insertion_point(field_mutable:dm.ConnectResponsePackage.sn)
  return _internal_mutable_sn();
}
inline const std::string& ConnectResponsePackage::_internal_sn() const {
  return sn_.Get();
}
inline void ConnectResponsePackage::_internal_set_sn(const std::string& value) {
  
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConnectResponsePackage::set_sn(std::string&& value) {
  
  sn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.ConnectResponsePackage.sn)
}
inline void ConnectResponsePackage::set_sn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.ConnectResponsePackage.sn)
}
inline void ConnectResponsePackage::set_sn(const char* value,
    size_t size) {
  
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.ConnectResponsePackage.sn)
}
inline std::string* ConnectResponsePackage::_internal_mutable_sn() {
  
  return sn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConnectResponsePackage::release_sn() {
  // @@protoc_insertion_point(field_release:dm.ConnectResponsePackage.sn)
  return sn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectResponsePackage::set_allocated_sn(std::string* sn) {
  if (sn != nullptr) {
    
  } else {
    
  }
  sn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.ConnectResponsePackage.sn)
}

// string serverIp = 2;
inline void ConnectResponsePackage::clear_serverip() {
  serverip_.ClearToEmpty();
}
inline const std::string& ConnectResponsePackage::serverip() const {
  // @@protoc_insertion_point(field_get:dm.ConnectResponsePackage.serverIp)
  return _internal_serverip();
}
inline void ConnectResponsePackage::set_serverip(const std::string& value) {
  _internal_set_serverip(value);
  // @@protoc_insertion_point(field_set:dm.ConnectResponsePackage.serverIp)
}
inline std::string* ConnectResponsePackage::mutable_serverip() {
  // @@protoc_insertion_point(field_mutable:dm.ConnectResponsePackage.serverIp)
  return _internal_mutable_serverip();
}
inline const std::string& ConnectResponsePackage::_internal_serverip() const {
  return serverip_.Get();
}
inline void ConnectResponsePackage::_internal_set_serverip(const std::string& value) {
  
  serverip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConnectResponsePackage::set_serverip(std::string&& value) {
  
  serverip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dm.ConnectResponsePackage.serverIp)
}
inline void ConnectResponsePackage::set_serverip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dm.ConnectResponsePackage.serverIp)
}
inline void ConnectResponsePackage::set_serverip(const char* value,
    size_t size) {
  
  serverip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dm.ConnectResponsePackage.serverIp)
}
inline std::string* ConnectResponsePackage::_internal_mutable_serverip() {
  
  return serverip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConnectResponsePackage::release_serverip() {
  // @@protoc_insertion_point(field_release:dm.ConnectResponsePackage.serverIp)
  return serverip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectResponsePackage::set_allocated_serverip(std::string* serverip) {
  if (serverip != nullptr) {
    
  } else {
    
  }
  serverip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dm.ConnectResponsePackage.serverIp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dm::TransMsg_PACKAGETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dm::TransMsg_PACKAGETYPE>() {
  return ::dm::TransMsg_PACKAGETYPE_descriptor();
}
template <> struct is_proto_enum< ::dm::CmdPackage_CMDTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dm::CmdPackage_CMDTYPE>() {
  return ::dm::CmdPackage_CMDTYPE_descriptor();
}
template <> struct is_proto_enum< ::dm::CmdPackageV2_CMDTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dm::CmdPackageV2_CMDTYPE>() {
  return ::dm::CmdPackageV2_CMDTYPE_descriptor();
}
template <> struct is_proto_enum< ::dm::ERRORCODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dm::ERRORCODE>() {
  return ::dm::ERRORCODE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_devicemanagement_2eproto
